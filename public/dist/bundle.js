!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=27)}([function(e,t,n){"use strict";e.exports=n(29)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(20),o=n(48),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function u(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:l,isStream:function(e){return u(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){e.exports=n(33)()},function(e,t,n){"use strict";n.r(t),n.d(t,"MemoryRouter",(function(){return U})),n.d(t,"Prompt",(function(){return $})),n.d(t,"Redirect",(function(){return q})),n.d(t,"Route",(function(){return Y})),n.d(t,"Router",(function(){return F})),n.d(t,"StaticRouter",(function(){return ne})),n.d(t,"Switch",(function(){return re})),n.d(t,"generatePath",(function(){return H})),n.d(t,"matchPath",(function(){return G})),n.d(t,"useHistory",(function(){return ae})),n.d(t,"useLocation",(function(){return ue})),n.d(t,"useParams",(function(){return le})),n.d(t,"useRouteMatch",(function(){return ce})),n.d(t,"withRouter",(function(){return oe})),n.d(t,"BrowserRouter",(function(){return se})),n.d(t,"HashRouter",(function(){return fe})),n.d(t,"Link",(function(){return ye})),n.d(t,"NavLink",(function(){return we}));var r=n(3),o=n(0),i=n.n(o),a=(n(5),n(1));function u(e){return"/"===e.charAt(0)}function l(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var c=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&u(e),a=t&&u(t),c=i||a;if(e&&u(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var s=o[o.length-1];n="."===s||".."===s||""===s}else n=!1;for(var f=0,d=o.length;d>=0;d--){var p=o[d];"."===p?l(o,d):".."===p?(l(o,d),f++):f&&(l(o,d),f--)}if(!c)for(;f--;f)o.unshift("..");!c||""===o[0]||o[0]&&u(o[0])||o.unshift("");var h=o.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};function s(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var f=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=s(t),o=s(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};var d=function(e,t){if(!e)throw new Error("Invariant failed")};function p(e){return"/"===e.charAt(0)?e:"/"+e}function h(e){return"/"===e.charAt(0)?e.substr(1):e}function m(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function v(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function y(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function g(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=Object(a.a)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=c(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function b(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var w=!("undefined"==typeof window||!window.document||!window.document.createElement);function E(e,t){t(window.confirm(e))}function k(){try{return window.history.state||{}}catch(e){return{}}}function x(e){void 0===e&&(e={}),w||d(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,u=i.forceRefresh,l=void 0!==u&&u,c=i.getUserConfirmation,s=void 0===c?E:c,f=i.keyLength,h=void 0===f?6:f,x=e.basename?v(p(e.basename)):"";function T(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return x&&(i=m(i,x)),g(i,r,n)}function S(){return Math.random().toString(36).substr(2,h)}var C=b();function O(e){Object(a.a)(F,e),F.length=n.length,C.notifyListeners(F.location,F.action)}function P(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||R(T(e.state))}function _(){R(T(k()))}var N=!1;function R(e){if(N)N=!1,O();else{C.confirmTransitionTo(e,"POP",s,(function(t){t?O({action:"POP",location:e}):function(e){var t=F.location,n=M.indexOf(t.key);-1===n&&(n=0);var r=M.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(N=!0,D(o))}(e)}))}}var j=T(k()),M=[j.key];function L(e){return x+y(e)}function D(e){n.go(e)}var A=0;function I(e){1===(A+=e)&&1===e?(window.addEventListener("popstate",P),o&&window.addEventListener("hashchange",_)):0===A&&(window.removeEventListener("popstate",P),o&&window.removeEventListener("hashchange",_))}var z=!1;var F={length:n.length,action:"POP",location:j,createHref:L,push:function(e,t){var o=g(e,t,S(),F.location);C.confirmTransitionTo(o,"PUSH",s,(function(e){if(e){var t=L(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),l)window.location.href=t;else{var u=M.indexOf(F.location.key),c=M.slice(0,u+1);c.push(o.key),M=c,O({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=g(e,t,S(),F.location);C.confirmTransitionTo(o,"REPLACE",s,(function(e){if(e){var t=L(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),l)window.location.replace(t);else{var u=M.indexOf(F.location.key);-1!==u&&(M[u]=o.key),O({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:D,goBack:function(){D(-1)},goForward:function(){D(1)},block:function(e){void 0===e&&(e=!1);var t=C.setPrompt(e);return z||(I(1),z=!0),function(){return z&&(z=!1,I(-1)),t()}},listen:function(e){var t=C.appendListener(e);return I(1),function(){I(-1),t()}}};return F}var T={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+h(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:h,decodePath:p},slash:{encodePath:p,decodePath:p}};function S(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function C(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function O(e){window.location.replace(S(window.location.href)+"#"+e)}function P(e){void 0===e&&(e={}),w||d(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?E:r,i=n.hashType,u=void 0===i?"slash":i,l=e.basename?v(p(e.basename)):"",c=T[u],s=c.encodePath,f=c.decodePath;function h(){var e=f(C());return l&&(e=m(e,l)),g(e)}var k=b();function x(e){Object(a.a)(F,e),F.length=t.length,k.notifyListeners(F.location,F.action)}var P=!1,_=null;function N(){var e,t,n=C(),r=s(n);if(n!==r)O(r);else{var i=h(),a=F.location;if(!P&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(_===y(i))return;_=null,function(e){if(P)P=!1,x();else{k.confirmTransitionTo(e,"POP",o,(function(t){t?x({action:"POP",location:e}):function(e){var t=F.location,n=L.lastIndexOf(y(t));-1===n&&(n=0);var r=L.lastIndexOf(y(e));-1===r&&(r=0);var o=n-r;o&&(P=!0,D(o))}(e)}))}}(i)}}var R=C(),j=s(R);R!==j&&O(j);var M=h(),L=[y(M)];function D(e){t.go(e)}var A=0;function I(e){1===(A+=e)&&1===e?window.addEventListener("hashchange",N):0===A&&window.removeEventListener("hashchange",N)}var z=!1;var F={length:t.length,action:"POP",location:M,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=S(window.location.href)),n+"#"+s(l+y(e))},push:function(e,t){var n=g(e,void 0,void 0,F.location);k.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=y(n),r=s(l+t);if(C()!==r){_=t,function(e){window.location.hash=e}(r);var o=L.lastIndexOf(y(F.location)),i=L.slice(0,o+1);i.push(t),L=i,x({action:"PUSH",location:n})}else x()}}))},replace:function(e,t){var n=g(e,void 0,void 0,F.location);k.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=y(n),r=s(l+t);C()!==r&&(_=t,O(r));var o=L.indexOf(y(F.location));-1!==o&&(L[o]=t),x({action:"REPLACE",location:n})}}))},go:D,goBack:function(){D(-1)},goForward:function(){D(1)},block:function(e){void 0===e&&(e=!1);var t=k.setPrompt(e);return z||(I(1),z=!0),function(){return z&&(z=!1,I(-1)),t()}},listen:function(e){var t=k.appendListener(e);return I(1),function(){I(-1),t()}}};return F}function _(e,t,n){return Math.min(Math.max(e,t),n)}function N(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,i=t.initialIndex,u=void 0===i?0:i,l=t.keyLength,c=void 0===l?6:l,s=b();function f(e){Object(a.a)(w,e),w.length=w.entries.length,s.notifyListeners(w.location,w.action)}function d(){return Math.random().toString(36).substr(2,c)}var p=_(u,0,o.length-1),h=o.map((function(e){return g(e,void 0,"string"==typeof e?d():e.key||d())})),m=y;function v(e){var t=_(w.index+e,0,w.entries.length-1),r=w.entries[t];s.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:h.length,action:"POP",location:h[p],index:p,entries:h,createHref:m,push:function(e,t){var r=g(e,t,d(),w.location);s.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=g(e,t,d(),w.location);s.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(w.entries[w.index]=r,f({action:"REPLACE",location:r}))}))},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return w}var R=n(16),j=n(17),M=n.n(j),L=(n(9),n(2)),D=n(7),A=n.n(D),I=function(e){var t=Object(R.a)();return t.displayName=e,t}("Router-History"),z=function(e){var t=Object(R.a)();return t.displayName=e,t}("Router"),F=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(r.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return i.a.createElement(z.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},i.a.createElement(I.Provider,{children:this.props.children||null,value:this.props.history}))},t}(i.a.Component);var U=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=N(t.props),t}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(F,{history:this.history,children:this.props.children})},t}(i.a.Component);var B=function(e){function t(){return e.apply(this,arguments)||this}Object(r.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(i.a.Component);function $(e){var t=e.message,n=e.when,r=void 0===n||n;return i.a.createElement(z.Consumer,null,(function(e){if(e||d(!1),!r||e.staticContext)return null;var n=e.history.block;return i.a.createElement(B,{onMount:function(e){e.release=n(t)},onUpdate:function(e,r){r.message!==t&&(e.release(),e.release=n(t))},onUnmount:function(e){e.release()},message:t})}))}var V={},W=0;function H(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(V[e])return V[e];var t=M.a.compile(e);return W<1e4&&(V[e]=t,W++),t}(e)(t,{pretty:!0})}function q(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return i.a.createElement(z.Consumer,null,(function(e){e||d(!1);var r=e.history,u=e.staticContext,l=o?r.push:r.replace,c=g(t?"string"==typeof n?H(n,t.params):Object(a.a)({},n,{pathname:H(n.pathname,t.params)}):n);return u?(l(c),null):i.a.createElement(B,{onMount:function(){l(c)},onUpdate:function(e,t){var n,r,o=g(t.to);n=o,r=Object(a.a)({},c,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&f(n.state,r.state)||l(c)},to:n})}))}var Q={},K=0;function G(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,u=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Q[n]||(Q[n]={});if(r[e])return r[e];var o=[],i={regexp:M()(e,o,t),keys:o};return K<1e4&&(r[e]=i,K++),i}(n,{end:i,strict:u,sensitive:c}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var s=l[0],f=l.slice(1),d=e===s;return i&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var Y=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(z.Consumer,null,(function(t){t||d(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?G(n.pathname,e.props):t.match,o=Object(a.a)({},t,{location:n,match:r}),u=e.props,l=u.children,c=u.component,s=u.render;return Array.isArray(l)&&0===l.length&&(l=null),i.a.createElement(z.Provider,{value:o},o.match?l?"function"==typeof l?l(o):l:c?i.a.createElement(c,o):s?s(o):null:"function"==typeof l?l(o):null)}))},t}(i.a.Component);function X(e){return"/"===e.charAt(0)?e:"/"+e}function J(e,t){if(!e)return t;var n=X(e);return 0!==t.pathname.indexOf(n)?t:Object(a.a)({},t,{pathname:t.pathname.substr(n.length)})}function Z(e){return"string"==typeof e?e:y(e)}function ee(e){return function(){d(!1)}}function te(){}var ne=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handlePush=function(e){return t.navigateTo(e,"PUSH")},t.handleReplace=function(e){return t.navigateTo(e,"REPLACE")},t.handleListen=function(){return te},t.handleBlock=function(){return te},t}Object(r.a)(t,e);var n=t.prototype;return n.navigateTo=function(e,t){var n=this.props,r=n.basename,o=void 0===r?"":r,i=n.context,u=void 0===i?{}:i;u.action=t,u.location=function(e,t){return e?Object(a.a)({},t,{pathname:X(e)+t.pathname}):t}(o,g(e)),u.url=Z(u.location)},n.render=function(){var e=this.props,t=e.basename,n=void 0===t?"":t,r=e.context,o=void 0===r?{}:r,u=e.location,l=void 0===u?"/":u,c=Object(L.a)(e,["basename","context","location"]),s={createHref:function(e){return X(n+Z(e))},action:"POP",location:J(n,g(l)),push:this.handlePush,replace:this.handleReplace,go:ee(),goBack:ee(),goForward:ee(),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(F,Object(a.a)({},c,{history:s,staticContext:o}))},t}(i.a.Component);var re=function(e){function t(){return e.apply(this,arguments)||this}return Object(r.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(z.Consumer,null,(function(t){t||d(!1);var n,r,o=e.props.location||t.location;return i.a.Children.forEach(e.props.children,(function(e){if(null==r&&i.a.isValidElement(e)){n=e;var u=e.props.path||e.props.from;r=u?G(o.pathname,Object(a.a)({},e.props,{path:u})):t.match}})),r?i.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(i.a.Component);function oe(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(L.a)(t,["wrappedComponentRef"]);return i.a.createElement(z.Consumer,null,(function(t){return t||d(!1),i.a.createElement(e,Object(a.a)({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,A()(n,e)}var ie=i.a.useContext;function ae(){return ie(I)}function ue(){return ie(z).location}function le(){var e=ie(z).match;return e?e.params:{}}function ce(e){var t=ue(),n=ie(z).match;return e?G(t.pathname,e):n}var se=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=x(t.props),t}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(F,{history:this.history,children:this.props.children})},t}(i.a.Component);var fe=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=P(t.props),t}return Object(r.a)(t,e),t.prototype.render=function(){return i.a.createElement(F,{history:this.history,children:this.props.children})},t}(i.a.Component);var de=function(e,t){return"function"==typeof e?e(t):e},pe=function(e,t){return"string"==typeof e?g(e,null,null,t):e},he=function(e){return e},me=i.a.forwardRef;void 0===me&&(me=he);var ve=me((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,u=Object(L.a)(e,["innerRef","navigate","onClick"]),l=u.target,c=Object(a.a)({},u,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=he!==me&&t||n,i.a.createElement("a",c)}));var ye=me((function(e,t){var n=e.component,r=void 0===n?ve:n,o=e.replace,u=e.to,l=e.innerRef,c=Object(L.a)(e,["component","replace","to","innerRef"]);return i.a.createElement(z.Consumer,null,(function(e){e||d(!1);var n=e.history,s=pe(de(u,e.location),e.location),f=s?n.createHref(s):"",p=Object(a.a)({},c,{href:f,navigate:function(){var t=de(u,e.location);(o?n.replace:n.push)(t)}});return he!==me?p.ref=t||l:p.innerRef=l,i.a.createElement(r,p)}))})),ge=function(e){return e},be=i.a.forwardRef;void 0===be&&(be=ge);var we=be((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,u=void 0===o?"active":o,l=e.activeStyle,c=e.className,s=e.exact,f=e.isActive,p=e.location,h=e.sensitive,m=e.strict,v=e.style,y=e.to,g=e.innerRef,b=Object(L.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return i.a.createElement(z.Consumer,null,(function(e){e||d(!1);var n=p||e.location,o=pe(de(y,n),n),w=o.pathname,E=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),k=E?G(n.pathname,{path:E,exact:s,sensitive:h,strict:m}):null,x=!!(f?f(k,n):k),T=x?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,u):c,S=x?Object(a.a)({},v,{},l):v,C=Object(a.a)({"aria-current":x&&r||null,className:T,style:S,to:o},b);return ge!==be?C.ref=t||g:C.innerRef=g,i.a.createElement(ye,C)}))}))},function(e,t,n){"use strict";var r=n(9),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||u&&u[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}}return t}},function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return s})),n.d(t,"connectAdvanced",(function(){return T})),n.d(t,"ReactReduxContext",(function(){return i})),n.d(t,"connect",(function(){return B})),n.d(t,"batch",(function(){return X.unstable_batchedUpdates})),n.d(t,"useDispatch",(function(){return q})),n.d(t,"createDispatchHook",(function(){return H})),n.d(t,"useSelector",(function(){return Y})),n.d(t,"createSelectorHook",(function(){return K})),n.d(t,"useStore",(function(){return W})),n.d(t,"createStoreHook",(function(){return V})),n.d(t,"shallowEqual",(function(){return C}));var r=n(0),o=n.n(r),i=(n(5),o.a.createContext(null));var a=function(e){e()},u={notify:function(){}};function l(){var e=a,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var c=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=u,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=l())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=u)},e}();var s=function(e){var t=e.store,n=e.context,a=e.children,u=Object(r.useMemo)((function(){var e=new c(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=u.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[u,l]);var s=n||i;return o.a.createElement(s.Provider,{value:u},a)},f=n(1),d=n(2),p=n(7),h=n.n(p),m=n(9),v="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,y=[],g=[null,null];function b(e,t){var n=e[1];return[t.payload,n+1]}function w(e,t,n){v((function(){return e.apply(void 0,t)}),n)}function E(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function k(e,t,n,r,o,i,a,u,l,c){if(e){var s=!1,f=null,d=function(){if(!s){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||l():(i.current=e,u.current=e,a.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var x=function(){return[null,0]};function T(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,u=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,l=n.methodName,s=void 0===l?"connectAdvanced":l,p=n.renderCountProp,v=void 0===p?void 0:p,T=n.shouldHandleStateChanges,S=void 0===T||T,C=n.storeKey,O=void 0===C?"store":C,P=(n.withRef,n.forwardRef),_=void 0!==P&&P,N=n.context,R=void 0===N?i:N,j=Object(d.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),M=R;return function(t){var n=t.displayName||t.name||"Component",i=u(n),a=Object(f.a)({},j,{getDisplayName:u,methodName:s,renderCountProp:v,shouldHandleStateChanges:S,storeKey:O,displayName:i,wrappedComponentName:n,WrappedComponent:t}),l=j.pure;var p=l?r.useMemo:function(e){return e()};function T(n){var i=Object(r.useMemo)((function(){var e=n.forwardedRef,t=Object(d.a)(n,["forwardedRef"]);return[n.context,e,t]}),[n]),u=i[0],l=i[1],s=i[2],h=Object(r.useMemo)((function(){return u&&u.Consumer&&Object(m.isContextConsumer)(o.a.createElement(u.Consumer,null))?u:M}),[u,M]),v=Object(r.useContext)(h),T=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(v)&&Boolean(v.store);var C=T?n.store:v.store,O=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(C)}),[C]),P=Object(r.useMemo)((function(){if(!S)return g;var e=new c(C,T?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[C,T,v]),_=P[0],N=P[1],R=Object(r.useMemo)((function(){return T?v:Object(f.a)({},v,{subscription:_})}),[T,v,_]),j=Object(r.useReducer)(b,y,x),L=j[0][0],D=j[1];if(L&&L.error)throw L.error;var A=Object(r.useRef)(),I=Object(r.useRef)(s),z=Object(r.useRef)(),F=Object(r.useRef)(!1),U=p((function(){return z.current&&s===I.current?z.current:O(C.getState(),s)}),[C,L,s]);w(E,[I,A,F,s,U,z,N]),w(k,[S,C,_,O,I,A,F,z,N,D],[C,_,O]);var B=Object(r.useMemo)((function(){return o.a.createElement(t,Object(f.a)({},U,{ref:l}))}),[l,t,U]);return Object(r.useMemo)((function(){return S?o.a.createElement(h.Provider,{value:R},B):B}),[h,B,R])}var C=l?o.a.memo(T):T;if(C.WrappedComponent=t,C.displayName=i,_){var P=o.a.forwardRef((function(e,t){return o.a.createElement(C,Object(f.a)({},e,{forwardedRef:t}))}));return P.displayName=i,P.WrappedComponent=t,h()(P,t)}return h()(C,t)}}function S(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function C(e,t){if(S(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!S(e[n[o]],t[n[o]]))return!1;return!0}var O=n(10);function P(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function _(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function N(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=_(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=_(o),o=r(t,n)),o},r}}var R=[function(e){return"function"==typeof e?N(e):void 0},function(e){return e?void 0:P((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?P((function(t){return Object(O.bindActionCreators)(e,t)})):void 0}];var j=[function(e){return"function"==typeof e?N(e):void 0},function(e){return e?void 0:P((function(){return{}}))}];function M(e,t,n){return Object(f.a)({},n,{},e,{},t)}var L=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return M}}];function D(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function A(e,t,n,r,o){var i,a,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,m,v=!f(p,a),y=!s(o,i);return i=o,a=p,v&&y?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):v?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):y?(h=e(i,a),m=!d(h,u),u=h,m&&(c=n(u,l,a)),c):c}return function(o,s){return p?h(o,s):(u=e(i=o,a=s),l=t(r,a),c=n(u,l,a),p=!0,c)}}function I(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=Object(d.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?A:D)(a,u,l,e,i)}function z(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function F(e,t){return e===t}function U(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?T:n,o=t.mapStateToPropsFactories,i=void 0===o?j:o,a=t.mapDispatchToPropsFactories,u=void 0===a?R:a,l=t.mergePropsFactories,c=void 0===l?L:l,s=t.selectorFactory,p=void 0===s?I:s;return function(e,t,n,o){void 0===o&&(o={});var a=o,l=a.pure,s=void 0===l||l,h=a.areStatesEqual,m=void 0===h?F:h,v=a.areOwnPropsEqual,y=void 0===v?C:v,g=a.areStatePropsEqual,b=void 0===g?C:g,w=a.areMergedPropsEqual,E=void 0===w?C:w,k=Object(d.a)(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),x=z(e,i,"mapStateToProps"),T=z(t,u,"mapDispatchToProps"),S=z(n,c,"mergeProps");return r(p,Object(f.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:x,initMapDispatchToProps:T,initMergeProps:S,pure:s,areStatesEqual:m,areOwnPropsEqual:y,areStatePropsEqual:b,areMergedPropsEqual:E},k))}}var B=U();function $(){return Object(r.useContext)(i)}function V(e){void 0===e&&(e=i);var t=e===i?$:function(){return Object(r.useContext)(e)};return function(){return t().store}}var W=V();function H(e){void 0===e&&(e=i);var t=e===i?W:V(e);return function(){return t().dispatch}}var q=H(),Q=function(e,t){return e===t};function K(e){void 0===e&&(e=i);var t=e===i?$:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=Q);var o=t();return function(e,t,n,o){var i,a=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new c(n,o)}),[n,o]),l=Object(r.useRef)(),s=Object(r.useRef)(),f=Object(r.useRef)();try{i=e!==s.current||l.current?e(n.getState()):f.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return v((function(){s.current=e,f.current=i,l.current=void 0})),v((function(){function e(){try{var e=s.current(n.getState());if(t(e,f.current))return;f.current=e}catch(e){l.current=e}a({})}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),i}(e,n,o.store,o.subscription)}}var G,Y=K(),X=n(12);G=X.unstable_batchedUpdates,a=G},function(e,t,n){"use strict";e.exports=n(35)},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return i})),n.d(t,"applyMiddleware",(function(){return v})),n.d(t,"bindActionCreators",(function(){return f})),n.d(t,"combineReducers",(function(){return c})),n.d(t,"compose",(function(){return m})),n.d(t,"createStore",(function(){return u}));var r=n(15),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,c=t,s=[],f=s,d=!1;function p(){f===s&&(f=s.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),s=null}}}function v(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,c=l(c,e)}finally{d=!1}for(var t=s=f,n=0;n<t.length;n++){(0,t[n])()}return e}function y(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,v({type:i.REPLACE})}function g(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return v({type:i.INIT}),(o={dispatch:v,subscribe:m,getState:h,replaceReducer:y})[r.a]=g,o}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,u=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<u.length;i++){var c=u[i],s=n[c],f=e[c],d=s(f,t);if(void 0===d){var p=l(c,t);throw new Error(p)}o[c]=d,r=r||d!==f}return(r=r||u.length!==Object.keys(e).length)?o:e}}function s(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=s(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=m.apply(void 0,i)(n.dispatch)})}}}},,function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(30)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMovieList=function(){return r.default.get(""+i)},t.getDetails=function(e){return r.default.get("https://api.themoviedb.org/3/movie/"+e+"?api_key="+a+"&language=en-US")},t.getSearch=function(e){return r.default.get("https://api.themoviedb.org/3/search/movie?api_key="+a+"&query="+e+"&limit=100&language=en-US")},t.getGenres=function(){return r.default.get("https://api.themoviedb.org/3/genre/movie/list?api_key="+a+"&limit=100&language=en-US")};o(n(0)),o(n(5));var r=o(n(46));function o(e){return e&&e.__esModule?e:{default:e}}var i="https://api.themoviedb.org/3/discover/movie?api_key=2d7b73f455842047ab931dac2c9a1b65&language=en-US&sort_by=vote_count.desc&include_adult=false&include_video=false&page=1",a="2d7b73f455842047ab931dac2c9a1b65"},function(e,t,n){"use strict";(function(t){var r=n(4),o=n(51),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,l={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t)&&(u=n(21)),u),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(i)})),e.exports=l}).call(this,n(50))},function(e,t,n){"use strict";(function(e,r){var o,i=n(26);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(19),n(36)(e))},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),i=n(3),a=n(5),u=n.n(a),l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=o.a.createContext||function(e,t){var n,o,a,s="__create-react-context-"+((l[a="__global_unique_id__"]=(l[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}Object(i.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=u.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(i.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((o={})[s]=u.a.object,o),{Provider:f,Consumer:d}};t.a=s}).call(this,n(19))},function(e,t,n){var r=n(37);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var E=null!=m&&null!=h&&h!==m,k="+"===b||"*"===b,x="?"===b||"*"===b,T=n[2]||s,S=y||g;r.push({name:v||i++,prefix:m||"",delimiter:T,optional:x,repeat:k,partial:E,asterisk:!!w,pattern:S?c(S):w?".*":"[^"+l(T)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",u=t||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=u[s.name];if(null==d){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var d=l(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),a+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(4),o=n(52),i=n(54),a=n(55),u=n(56),l=n(22);e.exports=function(e){return new Promise((function(t,c){var s=e.data,f=e.headers;r.isFormData(s)&&delete f["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var p=e.auth.username||"",h=e.auth.password||"";f.Authorization="Basic "+btoa(p+":"+h)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:n,config:e,request:d};o(t,c,r),d=null}},d.onerror=function(){c(l("Network Error",e,null,d)),d=null},d.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var m=n(57),v=(e.withCredentials||u(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;v&&(f[e.xsrfHeaderName]=v)}if("setRequestHeader"in d&&r.forEach(f,(function(e,t){void 0===s&&"content-type"===t.toLowerCase()?delete f[t]:d.setRequestHeader(t,e)})),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){d&&(d.abort(),c(e),d=null)})),void 0===s&&(s=null),d.send(s)}))}},function(e,t,n){"use strict";var r=n(53);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.movieAction=function(){return function(e){e({type:"MOVIE_ACTION",payload:"result_of_movie_action"})}},t.addMovieDetail=function(e){return function(t){t({type:"ADD_MOVIE_DETAIL",payload:r({},e)})}},t.removeMovieDetail=function(){return function(e){e({type:"REMOVE_MOVIE_DETAIL",payload:null})}},t.movieList=function(e){return function(t){t({type:"MOVIE_LIST",payload:r({},e)})}}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){n(28),e.exports=n(71)},function(e,t,n){"use strict";var r=c(n(0)),o=c(n(12)),i=n(8),a=n(6),u=c(n(38)),l=c(n(43));function c(e){return e&&e.__esModule?e:{default:e}}o.default.render(r.default.createElement(i.Provider,{store:(0,u.default)()},r.default.createElement(a.BrowserRouter,null,r.default.createElement(l.default,null))),document.getElementById("root"))},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(18),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function E(){}function k(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=w.prototype;var x=k.prototype=new E;x.constructor=k,r(x,w.prototype),x.isPureReactComponent=!0;var T={current:null},S=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:T.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var _=/\/+/g,N=[];function R(e,t,n,r){if(N.length){var o=N.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function j(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function M(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+L(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+L(u=t[c],c);l+=e(u,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+L(u,c++),r,o);else if("object"===u)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function L(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(_,"$&/")+"/")+n)),r.push(e))}function I(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(_,"$&/")+"/"),M(e,A,t=R(t,i,r,o)),j(t)}var z={current:null};function F(){var e=z.current;if(null===e)throw Error(y(321));return e}var U={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,D,t=R(null,null,t,n)),j(t)},count:function(e){return M(e,(function(){return null}),null)},toArray:function(e){var t=[];return I(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(y(143));return e}},t.Component=w,t.Fragment=u,t.Profiler=c,t.PureComponent=k,t.StrictMode=l,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=T.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)S.call(t,s)&&!C.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:i,type:e.type,key:a,ref:u,props:o,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(18),i=n(31);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function u(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var l=!1,c=null,s=!1,f=null,d={onError:function(e){l=!0,c=e}};function p(e,t,n,r,o,i,a,s,f){l=!1,c=null,u.apply(d,arguments)}var h=null,m=null,v=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,i,u,d,h){if(p.apply(this,arguments),l){if(!l)throw Error(a(198));var m=c;l=!1,c=null,s||(s=!0,f=m)}}(r,t,void 0,e),e.currentTarget=null}var g=null,b={};function w(){if(g)for(var e in b){var t=b[e],n=g.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!k[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in k[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;if(x.hasOwnProperty(l))throw Error(a(99,l));x[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&E(c[o],u,l);o=!0}else i.registrationName?(E(i.registrationName,u,l),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function E(e,t,n){if(T[e])throw Error(a(100,e));T[e]=t,S[e]=t.eventTypes[n].dependencies}var k=[],x={},T={},S={};function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&w()}var O=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),P=null,_=null,N=null;function R(e){if(e=m(e)){if("function"!=typeof P)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),P(e.stateNode,e.type,t))}}function j(e){_?N?N.push(e):N=[e]:_=e}function M(){if(_){var e=_,t=N;if(N=_=null,R(e),t)for(e=0;e<t.length;e++)R(t[e])}}function L(e,t){return e(t)}function D(e,t,n,r,o){return e(t,n,r,o)}function A(){}var I=L,z=!1,F=!1;function U(){null===_&&null===N||(A(),M())}function B(e,t,n){if(F)return e(t,n);F=!0;try{return I(e,t,n)}finally{F=!1,U()}}var $=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,V=Object.prototype.hasOwnProperty,W={},H={};function q(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var Q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){Q[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];Q[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){Q[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){Q[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){Q[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){Q[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){Q[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){Q[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){Q[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var K=/[\-:]([a-z])/g;function G(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(K,G);Q[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(K,G);Q[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(K,G);Q[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){Q[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),Q.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){Q[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var Y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var o=Q.hasOwnProperty(t)?Q[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!V.call(H,e)||!V.call(W,e)&&($.test(e)?H[e]=!0:(W[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Y.hasOwnProperty("ReactCurrentDispatcher")||(Y.ReactCurrentDispatcher={current:null}),Y.hasOwnProperty("ReactCurrentBatchConfig")||(Y.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ie=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,ue=Z?Symbol.for("react.concurrent_mode"):60111,le=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,de=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case pe:return ve(e.render);case de:if(e=1===e._status?e._result:null)return ve(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ve(e.type);n=null,r&&(n=ve(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(J,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ee(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xe(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Te(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Se(e,t){Te(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Oe(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ce(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Oe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Pe(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function _e(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function je(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Me(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Le="http://www.w3.org/1999/xhtml",De="http://www.w3.org/2000/svg";function Ae(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ie(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ae(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==De||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ue(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Be(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var $e={animationend:Be("Animation","AnimationEnd"),animationiteration:Be("Animation","AnimationIteration"),animationstart:Be("Animation","AnimationStart"),transitionend:Be("Transition","TransitionEnd")},Ve={},We={};function He(e){if(Ve[e])return Ve[e];if(!$e[e])return e;var t,n=$e[e];for(t in n)if(n.hasOwnProperty(t)&&t in We)return Ve[e]=n[t];return e}O&&(We=document.createElement("div").style,"AnimationEvent"in window||(delete $e.animationend.animation,delete $e.animationiteration.animation,delete $e.animationstart.animation),"TransitionEvent"in window||delete $e.transitionend.transition);var qe=He("animationend"),Qe=He("animationiteration"),Ke=He("animationstart"),Ge=He("transitionend"),Ye="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return tt(o),e;if(i===r)return tt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function ut(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(ot(e,at),it)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!O)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=On(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=lt(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var u=null,l=0;l<k.length;l++){var c=k[l];c&&(c=c.extractEvents(r,t,i,o,a))&&(u=rt(u,c))}ut(u)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Kt(t,"scroll",!0);break;case"focus":case"blur":Kt(t,"focus",!0),Kt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&Kt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ye.indexOf(e)&&Qt(e,t)}n.set(e,null)}}var mt,vt,yt,gt=!1,bt=[],wt=null,Et=null,kt=null,xt=new Map,Tt=new Map,St=[],Ct="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ot="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Pt(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function _t(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":Et=null;break;case"mouseover":case"mouseout":kt=null;break;case"pointerover":case"pointerout":xt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function Nt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=Pt(t,n,r,o,i),null!==t&&(null!==(t=Pn(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function Rt(e){var t=On(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function jt(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Pn(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Mt(e,t,n){jt(e)&&n.delete(t)}function Lt(){for(gt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=Pn(e.blockedOn))&&mt(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==wt&&jt(wt)&&(wt=null),null!==Et&&jt(Et)&&(Et=null),null!==kt&&jt(kt)&&(kt=null),xt.forEach(Mt),Tt.forEach(Mt)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Lt)))}function At(e){function t(t){return Dt(t,e)}if(0<bt.length){Dt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&Dt(wt,e),null!==Et&&Dt(Et,e),null!==kt&&Dt(kt,e),xt.forEach(t),Tt.forEach(t),n=0;n<St.length;n++)(r=St[n]).blockedOn===e&&(r.blockedOn=null);for(;0<St.length&&null===(n=St[0]).blockedOn;)Rt(n),null===n.blockedOn&&St.shift()}var It={},zt=new Map,Ft=new Map,Ut=["abort","abort",qe,"animationEnd",Qe,"animationIteration",Ke,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ge,"transitionEnd","waiting","waiting"];function Bt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),zt.set(r,i),It[o]=i}}Bt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Bt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Bt(Ut,2);for(var $t="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Vt=0;Vt<$t.length;Vt++)Ft.set($t[Vt],0);var Wt=i.unstable_UserBlockingPriority,Ht=i.unstable_runWithPriority,qt=!0;function Qt(e,t){Kt(t,e,!1)}function Kt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=Gt.bind(null,t,1,e);break;case 1:r=Yt.bind(null,t,1,e);break;default:r=Xt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Gt(e,t,n,r){z||A();var o=Xt,i=z;z=!0;try{D(o,e,t,n,r)}finally{(z=i)||U()}}function Yt(e,t,n,r){Ht(Wt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){if(qt)if(0<bt.length&&-1<Ct.indexOf(e))e=Pt(null,e,t,n,r),bt.push(e);else{var o=Jt(e,t,n,r);if(null===o)_t(e,r);else if(-1<Ct.indexOf(e))e=Pt(o,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return wt=Nt(wt,e,t,n,r,o),!0;case"dragenter":return Et=Nt(Et,e,t,n,r,o),!0;case"mouseover":return kt=Nt(kt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return xt.set(i,Nt(xt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Tt.set(i,Nt(Tt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){_t(e,r),e=dt(e,r,null,t);try{B(pt,e)}finally{ft(e)}}}}function Jt(e,t,n,r){if(null!==(n=On(n=lt(r)))){var o=Ze(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=et(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{B(pt,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var un=Le;function ln(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=S[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,vn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function En(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function kn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var xn=Math.random().toString(36).slice(2),Tn="__reactInternalInstance$"+xn,Sn="__reactEventHandlers$"+xn,Cn="__reactContainere$"+xn;function On(e){var t=e[Tn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Cn]||n[Tn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kn(e);null!==e;){if(n=e[Tn])return n;e=kn(e)}return t}n=(e=n).parentNode}return null}function Pn(e){return!(e=e[Tn]||e[Cn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function _n(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Nn(e){return e[Sn]||null}function Rn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function jn(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Mn(e,t,n){(t=jn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Ln(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Rn(t);for(t=n.length;0<t--;)Mn(n[t],"captured",e);for(t=0;t<n.length;t++)Mn(n[t],"bubbled",e)}}function Dn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=jn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function An(e){e&&e.dispatchConfig.registrationName&&Dn(e._targetInst,null,e)}function In(e){ot(e,Ln)}var zn=null,Fn=null,Un=null;function Bn(){if(Un)return Un;var e,t,n=Fn,r=n.length,o="value"in zn?zn.value:zn.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Un=o.slice(e,1<t?1-t:void 0)}function $n(){return!0}function Vn(){return!1}function Wn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?$n:Vn,this.isPropagationStopped=Vn,this}function Hn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Qn(e){e.eventPool=[],e.getPooled=Hn,e.release=qn}o(Wn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=$n)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=$n)},persist:function(){this.isPersistent=$n},isPersistent:Vn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Vn,this._dispatchInstances=this._dispatchListeners=null}}),Wn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Wn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Qn(n),n},Qn(Wn);var Kn=Wn.extend({data:null}),Gn=Wn.extend({data:null}),Yn=[9,13,27,32],Xn=O&&"CompositionEvent"in window,Jn=null;O&&"documentMode"in document&&(Jn=document.documentMode);var Zn=O&&"TextEvent"in window&&!Jn,er=O&&(!Xn||Jn&&8<Jn&&11>=Jn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Yn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var ur={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Xn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else ar?or(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(ar||i!==nr.compositionStart?i===nr.compositionEnd&&ar&&(o=Bn()):(Fn="value"in(zn=r)?zn.value:zn.textContent,ar=!0)),i=Kn.getPooled(i,t,n,r),o?i.data=o:null!==(o=ir(n))&&(i.data=o),In(i),o=i):o=null,(e=Zn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Xn&&or(e,t)?(e=Bn(),Un=Fn=zn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Gn.getPooled(nr.beforeInput,t,n,r)).data=e,In(t)):t=null,null===o?t:null===t?o:[o,t]}},lr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!lr[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Wn.getPooled(sr.change,e,t,n)).type="change",j(n),In(e),e}var dr=null,pr=null;function hr(e){ut(e)}function mr(e){if(Ee(_n(e)))return e}function vr(e,t){if("change"===e)return t}var yr=!1;function gr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&mr(pr))if(e=fr(pr,e,lt(e)),z)ut(e);else{z=!0;try{L(hr,e)}finally{z=!1,U()}}}function wr(e,t,n){"focus"===e?(gr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&gr()}function Er(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(pr)}function kr(e,t){if("click"===e)return mr(t)}function xr(e,t){if("input"===e||"change"===e)return mr(t)}O&&(yr=ct("input")&&(!document.documentMode||9<document.documentMode));var Tr={eventTypes:sr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var o=t?_n(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=vr;else if(cr(o))if(yr)a=xr;else{a=Er;var u=wr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=kr);if(a&&(a=a(e,t)))return fr(a,n,r);u&&u(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Oe(o,"number",o.value)}},Sr=Wn.extend({view:null,detail:null}),Cr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Or(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cr[e])&&!!t[e]}function Pr(){return Or}var _r=0,Nr=0,Rr=!1,jr=!1,Mr=Sr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Pr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=_r;return _r=e.screenX,Rr?"mousemove"===e.type?e.screenX-t:0:(Rr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Nr;return Nr=e.screenY,jr?"mousemove"===e.type?e.screenY-t:0:(jr=!0,0)}}),Lr=Mr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Dr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ar={eventTypes:Dr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?On(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var u=Mr,l=Dr.mouseLeave,c=Dr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=Lr,l=Dr.pointerLeave,c=Dr.pointerEnter,s="pointer");if(e=null==a?i:_n(a),i=null==t?i:_n(t),(l=u.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=i,(n=u.getPooled(c,t,n,r)).type=s+"enter",n.target=i,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(c=s,a=0,e=u=r;e;e=Rn(e))a++;for(e=0,t=c;t;t=Rn(t))e++;for(;0<a-e;)u=Rn(u),a--;for(;0<e-a;)c=Rn(c),e--;for(;a--;){if(u===c||u===c.alternate)break e;u=Rn(u),c=Rn(c)}u=null}else u=null;for(c=u,u=[];r&&r!==c&&(null===(a=r.alternate)||a!==c);)u.push(r),r=Rn(r);for(r=[];s&&s!==c&&(null===(a=s.alternate)||a!==c);)r.push(s),s=Rn(s);for(s=0;s<u.length;s++)Dn(u[s],"bubbled",l);for(s=r.length;0<s--;)Dn(r[s],"captured",n);return 0==(64&o)?[l]:[l,n]}};var Ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},zr=Object.prototype.hasOwnProperty;function Fr(e,t){if(Ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!zr.call(t,n[r])||!Ir(e[n[r]],t[n[r]]))return!1;return!0}var Ur=O&&"documentMode"in document&&11>=document.documentMode,Br={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},$r=null,Vr=null,Wr=null,Hr=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Hr||null==$r||$r!==sn(n)?null:("selectionStart"in(n=$r)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Wr&&Fr(Wr,n)?null:(Wr=n,(e=Wn.getPooled(Br.select,Vr,e,t)).type="select",e.target=$r,In(e),e))}var Qr={eventTypes:Br,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Je(o),i=S.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?_n(t):window,e){case"focus":(cr(o)||"true"===o.contentEditable)&&($r=o,Vr=t,Wr=null);break;case"blur":Wr=Vr=$r=null;break;case"mousedown":Hr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Hr=!1,qr(n,r);case"selectionchange":if(Ur)break;case"keydown":case"keyup":return qr(n,r)}return null}},Kr=Wn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Gr=Wn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Yr=Sr.extend({relatedTarget:null});function Xr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Sr.extend({key:function(e){if(e.key){var t=Jr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Pr,charCode:function(e){return"keypress"===e.type?Xr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Mr.extend({dataTransfer:null}),no=Sr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Pr}),ro=Wn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Mr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),io={eventTypes:It,extractEvents:function(e,t,n,r){var o=zt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Xr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Yr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Mr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case qe:case Qe:case Ke:e=Kr;break;case Ge:e=ro;break;case"scroll":e=Sr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Gr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Lr;break;default:e=Wn}return In(t=e.getPooled(o,t,n,r)),t}};if(g)throw Error(a(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),h=Nn,m=Pn,v=_n,C({SimpleEventPlugin:io,EnterLeaveEventPlugin:Ar,ChangeEventPlugin:Tr,SelectEventPlugin:Qr,BeforeInputEventPlugin:ur});var ao=[],uo=-1;function lo(e){0>uo||(e.current=ao[uo],ao[uo]=null,uo--)}function co(e,t){uo++,ao[uo]=e.current,e.current=t}var so={},fo={current:so},po={current:!1},ho=so;function mo(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function vo(e){return null!=(e=e.childContextTypes)}function yo(){lo(po),lo(fo)}function go(e,t,n){if(fo.current!==so)throw Error(a(168));co(fo,t),co(po,n)}function bo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,ve(t)||"Unknown",i));return o({},n,{},r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,ho=fo.current,co(fo,e),co(po,po.current),!0}function Eo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bo(e,t,ho),r.__reactInternalMemoizedMergedChildContext=e,lo(po),lo(fo),co(fo,e)):lo(po),co(po,n)}var ko=i.unstable_runWithPriority,xo=i.unstable_scheduleCallback,To=i.unstable_cancelCallback,So=i.unstable_requestPaint,Co=i.unstable_now,Oo=i.unstable_getCurrentPriorityLevel,Po=i.unstable_ImmediatePriority,_o=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,Ro=i.unstable_LowPriority,jo=i.unstable_IdlePriority,Mo={},Lo=i.unstable_shouldYield,Do=void 0!==So?So:function(){},Ao=null,Io=null,zo=!1,Fo=Co(),Uo=1e4>Fo?Co:function(){return Co()-Fo};function Bo(){switch(Oo()){case Po:return 99;case _o:return 98;case No:return 97;case Ro:return 96;case jo:return 95;default:throw Error(a(332))}}function $o(e){switch(e){case 99:return Po;case 98:return _o;case 97:return No;case 96:return Ro;case 95:return jo;default:throw Error(a(332))}}function Vo(e,t){return e=$o(e),ko(e,t)}function Wo(e,t,n){return e=$o(e),xo(e,t,n)}function Ho(e){return null===Ao?(Ao=[e],Io=xo(Po,Qo)):Ao.push(e),Mo}function qo(){if(null!==Io){var e=Io;Io=null,To(e)}Qo()}function Qo(){if(!zo&&null!==Ao){zo=!0;var e=0;try{var t=Ao;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ao=null}catch(t){throw null!==Ao&&(Ao=Ao.slice(e+1)),xo(Po,qo),t}finally{zo=!1}}}function Ko(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Go(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Yo={current:null},Xo=null,Jo=null,Zo=null;function ei(){Zo=Jo=Xo=null}function ti(e){var t=Yo.current;lo(Yo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ri(e,t){Xo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Na=!0),e.firstContext=null)}function oi(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Xo)throw Error(a(308));Jo=t,Xo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ui(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function li(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ci(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function si(e,t){var n=e.alternate;null!==n&&ui(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fi(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.baseQueue,u=i.shared.pending;if(null!==u){if(null!==a){var l=a.next;a.next=u.next,u.next=l}a=u,i.shared.pending=null,null!==(l=e.alternate)&&(null!==(l=l.updateQueue)&&(l.baseQueue=u))}if(null!==a){l=a.next;var c=i.baseState,s=0,f=null,d=null,p=null;if(null!==l)for(var h=l;;){if((u=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=m,f=c):p=p.next=m,u>s&&(s=u)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),il(u,h.suspenseConfig);e:{var v=e,y=h;switch(u=t,m=n,y.tag){case 1:if("function"==typeof(v=y.payload)){c=v.call(m,c,u);break e}c=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(u="function"==typeof(v=y.payload)?v.call(m,c,u):v))break e;c=o({},c,u);break e;case 2:ii=!0}}null!==h.callback&&(e.effectTag|=32,null===(u=i.effects)?i.effects=[h]:u.push(h))}if(null===(h=h.next)||h===l){if(null===(u=i.shared.pending))break;h=a.next=u.next,u.next=l,i.baseQueue=a=u,i.shared.pending=null}}null===p?f=c:p.next=d,i.baseState=f,i.baseQueue=p,al(s),e.expirationTime=s,e.memoizedState=c}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var pi=Y.ReactCurrentBatchConfig,hi=(new r.Component).refs;function mi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var vi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=qu(),o=pi.suspense;(o=li(r=Qu(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ci(e,o),Ku(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=qu(),o=pi.suspense;(o=li(r=Qu(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ci(e,o),Ku(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=qu(),r=pi.suspense;(r=li(n=Qu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ci(e,r),Ku(e,n)}};function yi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(o,i))}function gi(e,t,n){var r=!1,o=so,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=vo(t)?ho:fo.current,i=(r=null!=(r=t.contextTypes))?mo(e,o):so),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function bi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vi.enqueueReplaceState(t,t.state,null)}function wi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=hi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=vo(t)?ho:fo.current,o.context=mo(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(mi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&vi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Ei=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===hi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function xi(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ti(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Cl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=_l(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=Ol(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Nl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Pl(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=_l(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Ol(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case te:return(t=Nl(t,e.mode,n)).return=e,t}if(Ei(t)||me(t))return(t=Pl(t,e.mode,n,null)).return=e,t;xi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case te:return n.key===o?s(e,t,n,r):null}if(Ei(n)||me(n))return null!==o?null:f(e,t,n,r,null);xi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ei(r)||me(r))return f(t,e=e.get(n)||null,r,o,null);xi(t,r)}return null}function m(o,a,u,l){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],l))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,u,l,c){var s=me(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,c);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),u=i(b,u,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(o,g.value,c))&&(u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case ee:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(i.type===ne){n(e,c.sibling),(r=o(c,i.props.children)).return=e,e=r;break e}break;default:if(c.elementType===i.type){n(e,c.sibling),(r=o(c,i.props)).ref=ki(e,c,i),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}i.type===ne?((r=Pl(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Ol(i.type,i.key,i.props,null,e.mode,l)).ref=ki(e,r,i),l.return=e,e=l)}return u(e);case te:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Nl(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=_l(i,e.mode,l)).return=e,e=r),u(e);if(Ei(i))return m(e,r,i,l);if(me(i))return v(e,r,i,l);if(s&&xi(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Si=Ti(!0),Ci=Ti(!1),Oi={},Pi={current:Oi},_i={current:Oi},Ni={current:Oi};function Ri(e){if(e===Oi)throw Error(a(174));return e}function ji(e,t){switch(co(Ni,t),co(_i,e),co(Pi,Oi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ie(null,"");break;default:t=Ie(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Pi),co(Pi,t)}function Mi(){lo(Pi),lo(_i),lo(Ni)}function Li(e){Ri(Ni.current);var t=Ri(Pi.current),n=Ie(t,e.type);t!==n&&(co(_i,e),co(Pi,n))}function Di(e){_i.current===e&&(lo(Pi),lo(_i))}var Ai={current:0};function Ii(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function zi(e,t){return{responder:e,props:t}}var Fi=Y.ReactCurrentDispatcher,Ui=Y.ReactCurrentBatchConfig,Bi=0,$i=null,Vi=null,Wi=null,Hi=!1;function qi(){throw Error(a(321))}function Qi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Ir(e[n],t[n]))return!1;return!0}function Ki(e,t,n,r,o,i){if(Bi=i,$i=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fi.current=null===e||null===e.memoizedState?ya:ga,e=n(r,o),t.expirationTime===Bi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Wi=Vi=null,t.updateQueue=null,Fi.current=ba,e=n(r,o)}while(t.expirationTime===Bi)}if(Fi.current=va,t=null!==Vi&&null!==Vi.next,Bi=0,Wi=Vi=$i=null,Hi=!1,t)throw Error(a(300));return e}function Gi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Wi?$i.memoizedState=Wi=e:Wi=Wi.next=e,Wi}function Yi(){if(null===Vi){var e=$i.alternate;e=null!==e?e.memoizedState:null}else e=Vi.next;var t=null===Wi?$i.memoizedState:Wi.next;if(null!==t)Wi=t,Vi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Vi=e).memoizedState,baseState:Vi.baseState,baseQueue:Vi.baseQueue,queue:Vi.queue,next:null},null===Wi?$i.memoizedState=Wi=e:Wi=Wi.next=e}return Wi}function Xi(e,t){return"function"==typeof t?t(e):t}function Ji(e){var t=Yi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Vi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=i=null,c=o;do{var s=c.expirationTime;if(s<Bi){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,i=r):l=l.next=f,s>$i.expirationTime&&($i.expirationTime=s,al(s))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),il(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==o);null===l?i=r:l.next=u,Ir(r,t.memoizedState)||(Na=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zi(e){var t=Yi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);Ir(i,t.memoizedState)||(Na=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ea(e){var t=Gi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Xi,lastRenderedState:e}).dispatch=ma.bind(null,$i,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=$i.updateQueue)?(t={lastEffect:null},$i.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Yi().memoizedState}function ra(e,t,n,r){var o=Gi();$i.effectTag|=e,o.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Yi();r=void 0===r?null:r;var i=void 0;if(null!==Vi){var a=Vi.memoizedState;if(i=a.destroy,null!==r&&Qi(r,a.deps))return void ta(t,n,i,r)}$i.effectTag|=e,o.memoizedState=ta(1|t,n,i,r)}function ia(e,t){return ra(516,4,e,t)}function aa(e,t){return oa(516,4,e,t)}function ua(e,t){return oa(4,2,e,t)}function la(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ca(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,la.bind(null,t,e),n)}function sa(){}function fa(e,t){return Gi().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ha(e,t,n){var r=Bo();Vo(98>r?98:r,(function(){e(!0)})),Vo(97<r?97:r,(function(){var r=Ui.suspense;Ui.suspense=void 0===t?null:t;try{e(!1),n()}finally{Ui.suspense=r}}))}function ma(e,t,n){var r=qu(),o=pi.suspense;o={expirationTime:r=Qu(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===$i||null!==i&&i===$i)Hi=!0,o.expirationTime=Bi,$i.expirationTime=Bi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=i(a,n);if(o.eagerReducer=i,o.eagerState=u,Ir(u,a))return}catch(e){}Ku(e,r)}}var va={readContext:oi,useCallback:qi,useContext:qi,useEffect:qi,useImperativeHandle:qi,useLayoutEffect:qi,useMemo:qi,useReducer:qi,useRef:qi,useState:qi,useDebugValue:qi,useResponder:qi,useDeferredValue:qi,useTransition:qi},ya={readContext:oi,useCallback:fa,useContext:oi,useEffect:ia,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,la.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Gi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Gi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ma.bind(null,$i,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Gi().memoizedState=e},useState:ea,useDebugValue:sa,useResponder:zi,useDeferredValue:function(e,t){var n=ea(e),r=n[0],o=n[1];return ia((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ha.bind(null,t,e),[t,e]),n]}},ga={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:ua,useMemo:pa,useReducer:Ji,useRef:na,useState:function(){return Ji(Xi)},useDebugValue:sa,useResponder:zi,useDeferredValue:function(e,t){var n=Ji(Xi),r=n[0],o=n[1];return aa((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ji(Xi),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},ba={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:ua,useMemo:pa,useReducer:Zi,useRef:na,useState:function(){return Zi(Xi)},useDebugValue:sa,useResponder:zi,useDeferredValue:function(e,t){var n=Zi(Xi),r=n[0],o=n[1];return aa((function(){var n=Ui.suspense;Ui.suspense=void 0===t?null:t;try{o(e)}finally{Ui.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zi(Xi),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},wa=null,Ea=null,ka=!1;function xa(e,t){var n=Tl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ta(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Sa(e){if(ka){var t=Ea;if(t){var n=t;if(!Ta(e,t)){if(!(t=En(n.nextSibling))||!Ta(e,t))return e.effectTag=-1025&e.effectTag|2,ka=!1,void(wa=e);xa(wa,n)}wa=e,Ea=En(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ka=!1,wa=e}}function Ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function Oa(e){if(e!==wa)return!1;if(!ka)return Ca(e),ka=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=Ea;t;)xa(e,t),t=En(t.nextSibling);if(Ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ea=En(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ea=null}}else Ea=wa?En(e.stateNode.nextSibling):null;return!0}function Pa(){Ea=wa=null,ka=!1}var _a=Y.ReactCurrentOwner,Na=!1;function Ra(e,t,n,r){t.child=null===e?Ci(t,null,n,r):Si(t,e.child,n,r)}function ja(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=Ki(e,t,n,r,i,o),null===e||Na?(t.effectTag|=1,Ra(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ka(e,t,o))}function Ma(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Sl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ol(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,La(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(o,r)&&e.ref===t.ref)?Ka(e,t,i):(t.effectTag|=1,(e=Cl(a,r)).ref=t.ref,e.return=t,t.child=e)}function La(e,t,n,r,o,i){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(Na=!1,o<i)?(t.expirationTime=e.expirationTime,Ka(e,t,i)):Aa(e,t,n,r,i)}function Da(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Aa(e,t,n,r,o){var i=vo(n)?ho:fo.current;return i=mo(t,i),ri(t,o),n=Ki(e,t,n,r,i,o),null===e||Na?(t.effectTag|=1,Ra(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ka(e,t,o))}function Ia(e,t,n,r,o){if(vo(n)){var i=!0;wo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),gi(t,n,r),wi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=oi(c):c=mo(t,c=vo(n)?ho:fo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&bi(t,a,r,c),ii=!1;var d=t.memoizedState;a.state=d,fi(t,r,a,o),l=t.memoizedState,u!==r||d!==l||po.current||ii?("function"==typeof s&&(mi(t,n,s,r),l=t.memoizedState),(u=ii||yi(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,ui(e,t),u=t.memoizedProps,a.props=t.type===t.elementType?u:Go(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=oi(c):c=mo(t,c=vo(n)?ho:fo.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&bi(t,a,r,c),ii=!1,l=t.memoizedState,a.state=l,fi(t,r,a,o),d=t.memoizedState,u!==r||l!==d||po.current||ii?("function"==typeof s&&(mi(t,n,s,r),d=t.memoizedState),(s=ii||yi(t,n,u,r,l,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return za(e,t,n,r,i,o)}function za(e,t,n,r,o,i){Da(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Eo(t,n,!1),Ka(e,t,i);r=t.stateNode,_a.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,u,i)):Ra(e,t,u,i),t.memoizedState=r.state,o&&Eo(t,n,!0),t.child}function Fa(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),ji(e,t.containerInfo)}var Ua,Ba,$a,Va={dehydrated:null,retryTime:0};function Wa(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Ai.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),co(Ai,1&a),null===e){if(void 0!==i.fallback&&Sa(t),u){if(u=i.fallback,(i=Pl(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Pl(u,o,n,null)).return=t,i.sibling=n,t.memoizedState=Va,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ci(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,u){if(i=i.fallback,(n=Cl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(o=Cl(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Va,t.child=n,o}return n=Si(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=i.fallback,(i=Pl(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Pl(u,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Va,t.child=i,n}return t.memoizedState=null,t.child=Si(t,e,i.children,n)}function Ha(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ni(e.return,t)}function qa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function Qa(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ra(e,t,r.children,n),0!=(2&(r=Ai.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ha(e,n);else if(19===e.tag)Ha(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Ai,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ii(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),qa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ii(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}qa(t,!0,n,null,i,t.lastEffect);break;case"together":qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ka(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&al(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Cl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Cl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ga(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ya(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&yo(),null;case 3:return Mi(),lo(po),lo(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Oa(t)||(t.effectTag|=4),null;case 5:Di(t),n=Ri(Ni.current);var i=t.type;if(null!==e&&null!=t.stateNode)Ba(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ri(Pi.current),Oa(t)){r=t.stateNode,i=t.type;var u=t.memoizedProps;switch(r[Tn]=t,r[Sn]=u,i){case"iframe":case"object":case"embed":Qt("load",r);break;case"video":case"audio":for(e=0;e<Ye.length;e++)Qt(Ye[e],r);break;case"source":Qt("error",r);break;case"img":case"image":case"link":Qt("error",r),Qt("load",r);break;case"form":Qt("reset",r),Qt("submit",r);break;case"details":Qt("toggle",r);break;case"input":xe(r,u),Qt("invalid",r),ln(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Qt("invalid",r),ln(n,"onChange");break;case"textarea":Re(r,u),Qt("invalid",r),ln(n,"onChange")}for(var l in on(i,u),e=null,u)if(u.hasOwnProperty(l)){var c=u[l];"children"===l?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):T.hasOwnProperty(l)&&null!=c&&ln(n,l)}switch(i){case"input":we(r),Ce(r,u,!0);break;case"textarea":we(r),Me(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===un&&(e=Ae(i)),e===un?"script"===i?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(i,{is:r.is}):(e=l.createElement(i),"select"===i&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,i),e[Tn]=t,e[Sn]=r,Ua(e,t),t.stateNode=e,l=an(i,r),i){case"iframe":case"object":case"embed":Qt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ye.length;c++)Qt(Ye[c],e);c=r;break;case"source":Qt("error",e),c=r;break;case"img":case"image":case"link":Qt("error",e),Qt("load",e),c=r;break;case"form":Qt("reset",e),Qt("submit",e),c=r;break;case"details":Qt("toggle",e),c=r;break;case"input":xe(e,r),c=ke(e,r),Qt("invalid",e),ln(n,"onChange");break;case"option":c=Pe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=o({},r,{value:void 0}),Qt("invalid",e),ln(n,"onChange");break;case"textarea":Re(e,r),c=Ne(e,r),Qt("invalid",e),ln(n,"onChange");break;default:c=r}on(i,c);var s=c;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?nn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Fe(e,f):"children"===u?"string"==typeof f?("textarea"!==i||""!==f)&&Ue(e,f):"number"==typeof f&&Ue(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(T.hasOwnProperty(u)?null!=f&&ln(n,u):null!=f&&X(e,u,f,l))}switch(i){case"input":we(e),Ce(e,r,!1);break;case"textarea":we(e),Me(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?_e(e,!!r.multiple,n,!1):null!=r.defaultValue&&_e(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}yn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)$a(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ri(Ni.current),Ri(Pi.current),Oa(t)?(n=t.stateNode,r=t.memoizedProps,n[Tn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Tn]=t,t.stateNode=n)}return null;case 13:return lo(Ai),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Oa(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=i,i.nextEffect=u):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ai.current)?Ou===wu&&(Ou=Eu):(Ou!==wu&&Ou!==Eu||(Ou=ku),0!==ju&&null!==Tu&&(Ml(Tu,Cu),Ll(Tu,ju)))),(n||r)&&(t.effectTag|=4),null);case 4:return Mi(),null;case 10:return ti(t),null;case 17:return vo(t.type)&&yo(),null;case 19:if(lo(Ai),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(u=r.rendering)){if(i)Ga(r,!1);else if(Ou!==wu||null!==e&&0!=(64&e.effectTag))for(u=t.child;null!==u;){if(null!==(e=Ii(u))){for(t.effectTag|=64,Ga(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=u,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,u=e.dependencies,i.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return co(Ai,1&Ai.current|2),t.child}u=u.sibling}}else{if(!i)if(null!==(e=Ii(u))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ga(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Ga(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Uo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Uo(),n.sibling=null,t=Ai.current,co(Ai,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Xa(e){switch(e.tag){case 1:vo(e.type)&&yo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Mi(),lo(po),lo(fo),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Di(e),null;case 13:return lo(Ai),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return lo(Ai),null;case 4:return Mi(),null;case 10:return ti(e),null;default:return null}}function Ja(e,t){return{value:e,source:t,stack:ye(t)}}Ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ba=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u,l,c=t.stateNode;switch(Ri(Pi.current),e=null,n){case"input":a=ke(c,a),r=ke(c,r),e=[];break;case"option":a=Pe(c,a),r=Pe(c,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Ne(c,a),r=Ne(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(u in on(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in c=a[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(T.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(u,s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(T.hasOwnProperty(u)?(null!=s&&ln(i,u),e||c===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},$a=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Za="function"==typeof WeakSet?WeakSet:Set;function eu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gl(e,t)}else t.current=null}function nu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Go(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function iu(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ou(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Go(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&At(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function au(e,t,n){switch("function"==typeof kl&&kl(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Vo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){gl(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gl(e,t)}}(t,n);break;case 5:tu(t);break;case 4:su(e,t,n)}}function uu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&uu(t)}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function cu(e){e:{for(var t=e.return;null!==t;){if(lu(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Ue(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||lu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function su(e,t,n){for(var r,o,i=t,u=!1;;){if(!u){u=i.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}u=u.return}u=!0}if(5===i.tag||6===i.tag){e:for(var l=e,c=i,s=n,f=c;;)if(au(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(l=r,c=i.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(au(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(u=!1)}i.sibling.return=i.return,i=i.sibling}}function fu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ru(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Sn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Te(n,r),an(e,o),t=an(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?nn(n,l):"dangerouslySetInnerHTML"===u?Fe(n,l):"children"===u?Ue(n,l):X(n,u,l,t)}switch(e){case"input":Se(n,r);break;case"textarea":je(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?_e(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?_e(n,!!r.multiple,r.defaultValue,!0):_e(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,At(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Lu=Uo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void du(t);case 19:return void du(t);case 17:return}throw Error(a(163))}function du(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Za),t.forEach((function(t){var r=wl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function hu(e,t,n){(n=li(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Au||(Au=!0,Iu=r),eu(e,t)},n}function mu(e,t,n){(n=li(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return eu(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zu?zu=new Set([this]):zu.add(this),eu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vu,yu=Math.ceil,gu=Y.ReactCurrentDispatcher,bu=Y.ReactCurrentOwner,wu=0,Eu=3,ku=4,xu=0,Tu=null,Su=null,Cu=0,Ou=wu,Pu=null,_u=1073741823,Nu=1073741823,Ru=null,ju=0,Mu=!1,Lu=0,Du=null,Au=!1,Iu=null,zu=null,Fu=!1,Uu=null,Bu=90,$u=null,Vu=0,Wu=null,Hu=0;function qu(){return 0!=(48&xu)?1073741821-(Uo()/10|0):0!==Hu?Hu:Hu=1073741821-(Uo()/10|0)}function Qu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Bo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&xu))return Cu;if(null!==n)e=Ko(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Ko(e,150,100);break;case 97:case 96:e=Ko(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Tu&&e===Cu&&--e,e}function Ku(e,t){if(50<Vu)throw Vu=0,Wu=null,Error(a(185));if(null!==(e=Gu(e,t))){var n=Bo();1073741823===t?0!=(8&xu)&&0==(48&xu)?Zu(e):(Xu(e),0===xu&&qo()):Xu(e),0==(4&xu)||98!==n&&99!==n||(null===$u?$u=new Map([[e,t]]):(void 0===(n=$u.get(e))||n>t)&&$u.set(e,t))}}function Gu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Tu===o&&(al(t),Ou===ku&&Ml(o,Cu)),Ll(o,t)),o}function Yu(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!jl(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Xu(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ho(Zu.bind(null,e));else{var t=Yu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=qu();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Mo&&To(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Ho(Zu.bind(null,e)):Wo(r,Ju.bind(null,e),{timeout:10*(1073741821-t)-Uo()}),e.callbackNode=t}}}function Ju(e,t){if(Hu=0,t)return Dl(e,t=qu()),Xu(e),null;var n=Yu(e);if(0!==n){if(t=e.callbackNode,0!=(48&xu))throw Error(a(327));if(ml(),e===Tu&&n===Cu||nl(e,n),null!==Su){var r=xu;xu|=16;for(var o=ol();;)try{ll();break}catch(t){rl(e,t)}if(ei(),xu=r,gu.current=o,1===Ou)throw t=Pu,nl(e,n),Ml(e,n),Xu(e),t;if(null===Su)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ou,Tu=null,r){case wu:case 1:throw Error(a(345));case 2:Dl(e,2<n?2:n);break;case Eu:if(Ml(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(o)),1073741823===_u&&10<(o=Lu+500-Uo())){if(Mu){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nl(e,n);break}}if(0!==(i=Yu(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(dl.bind(null,e),o);break}dl(e);break;case ku:if(Ml(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(o)),Mu&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nl(e,n);break}if(0!==(o=Yu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Nu?r=10*(1073741821-Nu)-Uo():1073741823===_u?r=0:(r=10*(1073741821-_u)-5e3,0>(r=(o=Uo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*yu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(dl.bind(null,e),r);break}dl(e);break;case 5:if(1073741823!==_u&&null!==Ru){i=_u;var u=Ru;if(0>=(r=0|u.busyMinDurationMs)?r=0:(o=0|u.busyDelayMs,r=(i=Uo()-(10*(1073741821-i)-(0|u.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Ml(e,n),e.timeoutHandle=bn(dl.bind(null,e),r);break}}dl(e);break;default:throw Error(a(329))}if(Xu(e),e.callbackNode===t)return Ju.bind(null,e)}}return null}function Zu(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&xu))throw Error(a(327));if(ml(),e===Tu&&t===Cu||nl(e,t),null!==Su){var n=xu;xu|=16;for(var r=ol();;)try{ul();break}catch(t){rl(e,t)}if(ei(),xu=n,gu.current=r,1===Ou)throw n=Pu,nl(e,t),Ml(e,t),Xu(e),n;if(null!==Su)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Tu=null,dl(e),Xu(e)}return null}function el(e,t){var n=xu;xu|=1;try{return e(t)}finally{0===(xu=n)&&qo()}}function tl(e,t){var n=xu;xu&=-2,xu|=8;try{return e(t)}finally{0===(xu=n)&&qo()}}function nl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Su)for(n=Su.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Mi(),lo(po),lo(fo);break;case 5:Di(r);break;case 4:Mi();break;case 13:case 19:lo(Ai);break;case 10:ti(r)}n=n.return}Tu=e,Su=Cl(e.current,null),Cu=t,Ou=wu,Pu=null,Nu=_u=1073741823,Ru=null,ju=0,Mu=!1}function rl(e,t){for(;;){try{if(ei(),Fi.current=va,Hi)for(var n=$i.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Bi=0,Wi=Vi=$i=null,Hi=!1,null===Su||null===Su.return)return Ou=1,Pu=t,Su=null;e:{var o=e,i=Su.return,a=Su,u=t;if(t=Cu,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&a.mode)){var c=a.alternate;c?(a.updateQueue=c.updateQueue,a.memoizedState=c.memoizedState,a.expirationTime=c.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=0!=(1&Ai.current),f=i;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var h=f.memoizedProps;d=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!s)}}if(d){var m=f.updateQueue;if(null===m){var v=new Set;v.add(l),f.updateQueue=v}else m.add(l);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var y=li(1073741823,null);y.tag=2,ci(a,y)}a.expirationTime=1073741823;break e}u=void 0,a=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new pu,u=new Set,g.set(l,u)):void 0===(u=g.get(l))&&(u=new Set,g.set(l,u)),!u.has(a)){u.add(a);var b=bl.bind(null,o,l,a);l.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((ve(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(a))}5!==Ou&&(Ou=2),u=Ja(u,a),f=i;do{switch(f.tag){case 3:l=u,f.effectTag|=4096,f.expirationTime=t,si(f,hu(f,l,t));break e;case 1:l=u;var w=f.type,E=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===zu||!zu.has(E)))){f.effectTag|=4096,f.expirationTime=t,si(f,mu(f,l,t));break e}}f=f.return}while(null!==f)}Su=sl(Su)}catch(e){t=e;continue}break}}function ol(){var e=gu.current;return gu.current=va,null===e?va:e}function il(e,t){e<_u&&2<e&&(_u=e),null!==t&&e<Nu&&2<e&&(Nu=e,Ru=t)}function al(e){e>ju&&(ju=e)}function ul(){for(;null!==Su;)Su=cl(Su)}function ll(){for(;null!==Su&&!Lo();)Su=cl(Su)}function cl(e){var t=vu(e.alternate,e,Cu);return e.memoizedProps=e.pendingProps,null===t&&(t=sl(e)),bu.current=null,t}function sl(e){Su=e;do{var t=Su.alternate;if(e=Su.return,0==(2048&Su.effectTag)){if(t=Ya(t,Su,Cu),1===Cu||1!==Su.childExpirationTime){for(var n=0,r=Su.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Su.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Su.firstEffect),null!==Su.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Su.firstEffect),e.lastEffect=Su.lastEffect),1<Su.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Su:e.firstEffect=Su,e.lastEffect=Su))}else{if(null!==(t=Xa(Su)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Su.sibling))return t;Su=e}while(null!==Su);return Ou===wu&&(Ou=5),null}function fl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function dl(e){var t=Bo();return Vo(99,pl.bind(null,e,t)),null}function pl(e,t){do{ml()}while(null!==Uu);if(0!=(48&xu))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fl(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Tu&&(Su=Tu=null,Cu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=xu;xu|=32,bu.current=null,mn=qt;var u=pn();if(hn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,m=0,v=0,y=u,g=null;t:for(;;){for(var b;y!==l||0!==s&&3!==y.nodeType||(p=d+s),y!==f||0!==c&&3!==y.nodeType||(h=d+c),3===y.nodeType&&(d+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===u)break t;if(g===l&&++m===s&&(p=d),g===f&&++v===c&&(h=d),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;vn={activeElementDetached:null,focusedElem:u,selectionRange:l},qt=!1,Du=o;do{try{hl()}catch(e){if(null===Du)throw Error(a(330));gl(Du,e),Du=Du.nextEffect}}while(null!==Du);Du=o;do{try{for(u=e,l=t;null!==Du;){var w=Du.effectTag;if(16&w&&Ue(Du.stateNode,""),128&w){var E=Du.alternate;if(null!==E){var k=E.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&w){case 2:cu(Du),Du.effectTag&=-3;break;case 6:cu(Du),Du.effectTag&=-3,fu(Du.alternate,Du);break;case 1024:Du.effectTag&=-1025;break;case 1028:Du.effectTag&=-1025,fu(Du.alternate,Du);break;case 4:fu(Du.alternate,Du);break;case 8:su(u,s=Du,l),uu(s)}Du=Du.nextEffect}}catch(e){if(null===Du)throw Error(a(330));gl(Du,e),Du=Du.nextEffect}}while(null!==Du);if(k=vn,E=pn(),w=k.focusedElem,l=k.selectionRange,E!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==l&&hn(w)&&(E=l.start,void 0===(k=l.end)&&(k=E),"selectionStart"in w?(w.selectionStart=E,w.selectionEnd=Math.min(k,w.value.length)):(k=(E=w.ownerDocument||document)&&E.defaultView||window).getSelection&&(k=k.getSelection(),s=w.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!k.extend&&u>l&&(s=l,l=u,u=s),s=dn(w,u),f=dn(w,l),s&&f&&(1!==k.rangeCount||k.anchorNode!==s.node||k.anchorOffset!==s.offset||k.focusNode!==f.node||k.focusOffset!==f.offset)&&((E=E.createRange()).setStart(s.node,s.offset),k.removeAllRanges(),u>l?(k.addRange(E),k.extend(f.node,f.offset)):(E.setEnd(f.node,f.offset),k.addRange(E))))),E=[];for(k=w;k=k.parentNode;)1===k.nodeType&&E.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<E.length;w++)(k=E[w]).element.scrollLeft=k.left,k.element.scrollTop=k.top}qt=!!mn,vn=mn=null,e.current=n,Du=o;do{try{for(w=e;null!==Du;){var x=Du.effectTag;if(36&x&&iu(w,Du.alternate,Du),128&x){E=void 0;var T=Du.ref;if(null!==T){var S=Du.stateNode;switch(Du.tag){case 5:E=S;break;default:E=S}"function"==typeof T?T(E):T.current=E}}Du=Du.nextEffect}}catch(e){if(null===Du)throw Error(a(330));gl(Du,e),Du=Du.nextEffect}}while(null!==Du);Du=null,Do(),xu=i}else e.current=n;if(Fu)Fu=!1,Uu=e,Bu=t;else for(Du=o;null!==Du;)t=Du.nextEffect,Du.nextEffect=null,Du=t;if(0===(t=e.firstPendingTime)&&(zu=null),1073741823===t?e===Wu?Vu++:(Vu=0,Wu=e):Vu=0,"function"==typeof El&&El(n.stateNode,r),Xu(e),Au)throw Au=!1,e=Iu,Iu=null,e;return 0!=(8&xu)||qo(),null}function hl(){for(;null!==Du;){var e=Du.effectTag;0!=(256&e)&&nu(Du.alternate,Du),0==(512&e)||Fu||(Fu=!0,Wo(97,(function(){return ml(),null}))),Du=Du.nextEffect}}function ml(){if(90!==Bu){var e=97<Bu?97:Bu;return Bu=90,Vo(e,vl)}}function vl(){if(null===Uu)return!1;var e=Uu;if(Uu=null,0!=(48&xu))throw Error(a(331));var t=xu;for(xu|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ru(5,n),ou(5,n)}}catch(t){if(null===e)throw Error(a(330));gl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return xu=t,qo(),!0}function yl(e,t,n){ci(e,t=hu(e,t=Ja(n,t),1073741823)),null!==(e=Gu(e,1073741823))&&Xu(e)}function gl(e,t){if(3===e.tag)yl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zu||!zu.has(r))){ci(n,e=mu(n,e=Ja(t,e),1073741823)),null!==(n=Gu(n,1073741823))&&Xu(n);break}}n=n.return}}function bl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Tu===e&&Cu===n?Ou===ku||Ou===Eu&&1073741823===_u&&Uo()-Lu<500?nl(e,Cu):Mu=!0:jl(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Xu(e)))}function wl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Qu(t=qu(),e,null)),null!==(e=Gu(e,t))&&Xu(e)}vu=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Na=!0;else{if(r<n){switch(Na=!1,t.tag){case 3:Fa(t),Pa();break;case 5:if(Li(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&wo(t);break;case 4:ji(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,co(Yo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Wa(e,t,n):(co(Ai,1&Ai.current),null!==(t=Ka(e,t,n))?t.sibling:null);co(Ai,1&Ai.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Qa(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),co(Ai,Ai.current),!r)return null}return Ka(e,t,n)}Na=!1}}else Na=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=mo(t,fo.current),ri(t,n),o=Ki(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var i=!0;wo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&mi(t,r,u,e),o.updater=vi,t.stateNode=o,o._reactInternalFiber=t,wi(t,r,e,n),t=za(null,t,r,!0,i,n)}else t.tag=0,Ra(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Sl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===fe)return 14}return 2}(o),e=Go(o,e),i){case 0:t=Aa(null,t,o,e,n);break e;case 1:t=Ia(null,t,o,e,n);break e;case 11:t=ja(null,t,o,e,n);break e;case 14:t=Ma(null,t,o,Go(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Aa(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ia(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 3:if(Fa(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ui(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)Pa(),t=Ka(e,t,n);else{if((o=t.stateNode.hydrate)&&(Ea=En(t.stateNode.containerInfo.firstChild),wa=t,o=ka=!0),o)for(n=Ci(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ra(e,t,r,n),Pa();t=t.child}return t;case 5:return Li(t),null===e&&Sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,gn(r,o)?u=null:null!==i&&gn(r,i)&&(t.effectTag|=16),Da(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ra(e,t,u,n),t=t.child),t;case 6:return null===e&&Sa(t),null;case 13:return Wa(e,t,n);case 4:return ji(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):Ra(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ja(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 7:return Ra(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ra(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var l=t.type._context;if(co(Yo,l._currentValue),l._currentValue=i,null!==u)if(l=u.value,0===(i=Ir(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!po.current){t=Ka(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=li(n,null)).tag=2,ci(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ni(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Ra(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.effectTag|=1,Ra(e,t,r,n),t.child;case 14:return i=Go(o=t.type,t.pendingProps),Ma(e,t,o,i=Go(o.type,i),r,n);case 15:return La(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Go(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,wo(t)):e=!1,ri(t,n),gi(t,r,o),wi(t,r,o,n),za(null,t,r,!0,e,n);case 19:return Qa(e,t,n)}throw Error(a(156,t.tag))};var El=null,kl=null;function xl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Tl(e,t,n,r){return new xl(e,t,n,r)}function Sl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Cl(e,t){var n=e.alternate;return null===n?((n=Tl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ol(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Sl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return Pl(n.children,o,i,t);case ue:u=8,o|=7;break;case re:u=8,o|=1;break;case oe:return(e=Tl(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case ce:return(e=Tl(13,n,t,o)).type=ce,e.elementType=ce,e.expirationTime=i,e;case se:return(e=Tl(19,n,t,o)).elementType=se,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:u=10;break e;case ae:u=9;break e;case le:u=11;break e;case fe:u=14;break e;case de:u=16,r=null;break e;case pe:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Tl(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Pl(e,t,n,r){return(e=Tl(7,e,r,t)).expirationTime=n,e}function _l(e,t,n){return(e=Tl(6,e,null,t)).expirationTime=n,e}function Nl(e,t,n){return(t=Tl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Rl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function jl(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Ml(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Ll(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Dl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Al(e,t,n,r){var o=t.current,i=qu(),u=pi.suspense;i=Qu(i,o,u);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(vo(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(vo(c)){n=bo(n,c,l);break e}}n=l}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=li(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ci(o,t),Ku(o,i),i}function Il(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function zl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fl(e,t){zl(e,t),(e=e.alternate)&&zl(e,t)}function Ul(e,t,n){var r=new Rl(e,t,n=null!=n&&!0===n.hydrate),o=Tl(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ai(o),e[Cn]=r.current,n&&0!==t&&function(e,t){var n=Je(t);Ct.forEach((function(e){ht(e,t,n)})),Ot.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Bl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function $l(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Il(a);u.call(e)}}Al(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ul(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Il(a);l.call(e)}}tl((function(){Al(t,a,e,o)}))}return Il(a)}function Vl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Wl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Bl(t))throw Error(a(200));return Vl(e,t,null,n)}Ul.prototype.render=function(e){Al(e,this._internalRoot,null,null)},Ul.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Al(null,e,null,(function(){t[Cn]=null}))},mt=function(e){if(13===e.tag){var t=Ko(qu(),150,100);Ku(e,t),Fl(e,t)}},vt=function(e){13===e.tag&&(Ku(e,3),Fl(e,3))},yt=function(e){if(13===e.tag){var t=qu();Ku(e,t=Qu(t,e,null)),Fl(e,t)}},P=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Nn(r);if(!o)throw Error(a(90));Ee(r),Se(r,o)}}}break;case"textarea":je(e,n);break;case"select":null!=(t=n.value)&&_e(e,!!n.multiple,t,!1)}},L=el,D=function(e,t,n,r,o){var i=xu;xu|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(xu=i)&&qo()}},A=function(){0==(49&xu)&&(function(){if(null!==$u){var e=$u;$u=null,e.forEach((function(e,t){Dl(t,e),Xu(t)})),qo()}}(),ml())},I=function(e,t){var n=xu;xu|=2;try{return e(t)}finally{0===(xu=n)&&qo()}};var Hl,ql,Ql={Events:[Pn,_n,Nn,C,x,In,function(e){ot(e,An)},j,M,Xt,ut,ml,{current:!1}]};ql=(Hl={findFiberByHostInstance:On,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);El=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},kl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Hl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return ql?ql(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Ql,t.createPortal=Wl,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&xu))throw Error(a(187));var n=xu;xu|=1;try{return Vo(99,e.bind(null,t))}finally{xu=n,qo()}},t.hydrate=function(e,t,n){if(!Bl(t))throw Error(a(200));return $l(null,e,t,!0,n)},t.render=function(e,t,n){if(!Bl(t))throw Error(a(200));return $l(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Bl(e))throw Error(a(40));return!!e._reactRootContainer&&(tl((function(){$l(null,null,e,!1,(function(){e._reactRootContainer=null,e[Cn]=null}))})),!0)},t.unstable_batchedUpdates=el,t.unstable_createPortal=function(e,t){return Wl(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Bl(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return $l(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(32)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,u;if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},o=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var g=!1,b=null,w=-1,E=5,k=0;a=function(){return t.unstable_now()>=k},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,T=x.port2;x.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();k=e+E;try{b(!0,e)?T.postMessage(null):(g=!1,b=null)}catch(e){throw T.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,T.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},i=function(){m(w),w=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<P(o,t)))break e;e[r]=t,e[n]=o,n=r}}function C(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,l=e[u];if(void 0!==a&&0>P(a,n))void 0!==l&&0>P(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>P(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var _=[],N=[],R=1,j=null,M=3,L=!1,D=!1,A=!1;function I(e){for(var t=C(N);null!==t;){if(null===t.callback)O(N);else{if(!(t.startTime<=e))break;O(N),t.sortIndex=t.expirationTime,S(_,t)}t=C(N)}}function z(e){if(A=!1,I(e),!D)if(null!==C(_))D=!0,r(F);else{var t=C(N);null!==t&&o(z,t.startTime-e)}}function F(e,n){D=!1,A&&(A=!1,i()),L=!0;var r=M;try{for(I(n),j=C(_);null!==j&&(!(j.expirationTime>n)||e&&!a());){var u=j.callback;if(null!==u){j.callback=null,M=j.priorityLevel;var l=u(j.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?j.callback=l:j===C(_)&&O(_),I(n)}else O(_);j=C(_)}if(null!==j)var c=!0;else{var s=C(N);null!==s&&o(z,s.startTime-n),c=!1}return c}finally{j=null,M=r,L=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){D||L||(D=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return C(_)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),l=u;return e={id:R++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,S(N,e),null===C(_)&&e===C(N)&&(A?i():A=!0,o(z,l-u))):(e.sortIndex=a,S(_,e),D||L||(D=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();I(e);var n=C(_);return n!==j&&null!==j&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<j.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},function(e,t,n){"use strict";var r=n(34);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,E=r?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case y:case v:case c:return e;default:return t}}case i:return t}}}function x(e){return k(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=v,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return x(e)||k(e)===f},t.isConcurrentMode=x,t.isContextConsumer=function(e){return k(e)===s},t.isContextProvider=function(e){return k(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return k(e)===p},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===y},t.isMemo=function(e){return k(e)===v},t.isPortal=function(e){return k(e)===i},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===u},t.isSuspense=function(e){return k(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===E||e.$$typeof===g)},t.typeOf=k},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return(0,r.createStore)(i.default,(0,r.applyMiddleware)(o.default))};var r=n(10),o=a(n(39)),i=a(n(40));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}n.r(t);var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),o=a(n(41)),i=a(n(42));function a(e){return e&&e.__esModule?e:{default:e}}t.default=(0,r.combineReducers)({movieReducer:i.default,genreReducer:o.default})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];switch(t.type){case"ALL_GENRES":return{movieGenres:t.payload};case"SELECTED_GENRE":return{selectedGenre:t.payload};default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];switch(t.type){case"MOVIE_ACTION":return{result:t.payload};case"ADD_MOVIE_DETAIL":case"REMOVE_MOVIE_DETAIL":return{movieDetail:t.payload};case"MOVIE_LIST":return{movieList:t.payload};default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=m(i),u=n(8),l=n(6),c=m(n(44)),s=m(n(65)),f=m(n(66)),d=m(n(67)),p=m(n(69)),h=m(n(70));function m(e){return e&&e.__esModule?e:{default:e}}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var g=function(e){function t(){return v(this,t),y(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){return a.default.createElement("div",{className:"app"},a.default.createElement(c.default,null),a.default.createElement(l.Switch,null,a.default.createElement(l.Route,{exact:!0,path:"/",component:d.default}),a.default.createElement(l.Route,{path:"/about",component:f.default}),a.default.createElement(l.Route,{exact:!0,path:"/Movie/:id",render:function(e){var t=e.props;return a.default.createElement(p.default,t)}}),a.default.createElement(l.Route,{path:"/advSearch",component:h.default})),a.default.createElement(s.default,null))}}]),t}(i.Component);t.default=(0,l.withRouter)((0,u.connect)((function(e){return r({},e)}),(function(e){return{}}))(g))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),o=n(6),i=a(n(45));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return r.default.createElement("div",{className:"header"},r.default.createElement("nav",null,r.default.createElement("ul",{className:"menu"},r.default.createElement("li",null,r.default.createElement(o.Link,{to:"/"},"Home")),r.default.createElement("li",null,r.default.createElement(o.Link,{to:"/AdvSearch"},"Search+")),r.default.createElement("li",null,r.default.createElement(o.Link,{to:"/about"},"About"))),r.default.createElement("div",{className:"search"},r.default.createElement(i.default,null))))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Autocomplete=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=c(o),a=c(n(5)),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(13)),l=n(6);function c(e){return e&&e.__esModule?e:{default:e}}var s=t.Autocomplete=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.getInfo=function(){u.getSearch(n.state.userInput).then((function(e){var t=e.data,r=(t.results,t.results.map((function(e){return{id:e.id,title:e.title}})));n.setState({results:r})})).catch((function(e){console.error(e)}))},n.onChange=function(e){n.props.suggestions;n.setState({userInput:e.currentTarget.value},(function(){n.state.userInput&&n.state.userInput.length>1&&n.getInfo()}));e.currentTarget.value;var t=n.state.results;n.setState({activeSuggestion:0,results:t,showSuggestions:!0,userInput:e.currentTarget.value})},n.onClick=function(e){n.setState({activeSuggestion:0,results:[],showSuggestions:!1,userInput:e.currentTarget.innerText})},n.onKeyDown=function(e){var t=n.state,r=t.activeSuggestion,o=t.results;if(13===e.keyCode)n.setState({activeSuggestion:0,showSuggestions:!1,userInput:o[r]});else if(38===e.keyCode){if(0===r)return;n.setState({activeSuggestion:r-1})}else if(40===e.keyCode){if(r-1===o.length)return;n.setState({activeSuggestion:r+1})}},n.state={activeSuggestion:0,showSuggestions:!1,userInput:"",results:[]},n.setWrapperRef=n.setWrapperRef.bind(n),n.handleClickOutside=n.handleClickOutside.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"componentDidMount",value:function(){document.addEventListener("mousedown",this.handleClickOutside)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("mousedown",this.handleClickOutside)}},{key:"setWrapperRef",value:function(e){this.wrapperRef=e}},{key:"handleClickOutside",value:function(e){this.wrapperRef&&!this.wrapperRef.contains(e.target)&&this.setState({activeSuggestion:0,results:[],showSuggestions:!1,userInput:""})}},{key:"render",value:function(){var e=this.onChange,t=this.onClick,n=this.onKeyDown,r=this.state,o=r.activeSuggestion,a=r.results,u=r.showSuggestions,c=r.userInput,s=void 0;return u&&c&&(s=a.length?i.default.createElement("ul",{id:"searchResults",ref:this.setWrapperRef},a.map((function(e,n){return n===o&&"",i.default.createElement("li",{className:"autocompList",key:e.id,onClick:t},i.default.createElement(l.Link,{to:"/Movie/"+e.id},e.title))}))):i.default.createElement("ul",{id:"searchResults"},i.default.createElement("li",null,"No suggestions"))),i.default.createElement(i.default.Fragment,null,i.default.createElement("input",{type:"search",onChange:e,onKeyDown:n,value:c}),s)}}]),t}(o.Component);s.propTypes={suggestions:a.default.instanceOf(Array)},s.defaultProperty={suggestions:[]},t.default=s},function(e,t,n){e.exports=n(47)},function(e,t,n){"use strict";var r=n(4),o=n(20),i=n(49),a=n(14);function u(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var l=u(a);l.Axios=i,l.create=function(e){return u(r.merge(a,e))},l.Cancel=n(24),l.CancelToken=n(63),l.isCancel=n(23),l.all=function(e){return Promise.all(e)},l.spread=n(64),e.exports=l,e.exports.default=l},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(14),o=n(4),i=n(58),a=n(59);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}})),o.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],s=!1,f=-1;function d(){s&&l&&(s=!1,l.length?c=l.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=u(d);s=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||s||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(22);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(4);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(4),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(4);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(4);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(4);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(4),o=n(60),i=n(23),a=n(14),u=n(61),l=n(62);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!u(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(24);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){return i.default.createElement("div",{className:"footer"},i.default.createElement("p",null,"Copyright 2020 - React platform"))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=u(o),a=u(n(5));n(6);function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={loading:!1},n.goBack=n.goBack.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"goBack",value:function(){this.props.history.goBack()}},{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.state;e.totalResults,e.totalPages,e.results,e.loading;return i.default.createElement("div",{className:"about"},i.default.createElement("div",{className:"back",onClick:this.goBack}),i.default.createElement("h2",null,"About"),i.default.createElement("div",null,"Simple about page...",i.default.createElement("div",null,"Frontend Challenge v1.0 realized for Global Gaming",i.default.createElement("span",null,"G.C."))))}}]),t}(o.Component);l.propTypes={count:a.default.number},t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=d(i),u=(d(n(5)),function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(13))),l=n(8),c=n(6),s=n(25),f=n(68);function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={loading:!1,totalResults:null,totalPages:null,movieList:[],results:[],movieGenres:[]},n.addMovieDetail=function(e){return n.props.addMovieDetail(e)},n.movieList=function(e){return n.props.movieList(e)},n.removeMovieDetail=function(){return n.props.removeMovieDetail()},n.selectedGenre=function(e){var t=e.target.value;return t?n.updateView(t):n.getMovieList(),n.props.selectedGenre(t)},n.movieGenres=function(e){return n.props.movieGenres(e)},n.getMovieList=function(){u.getMovieList().then((function(e){if(!n.state.loading){var t=e.data,r=t.total_results,o=t.total_pages,i=t.results;n.setState({loading:!1,totalResults:r,totalPages:o,movieList:i,results:i}),n.movieList(i)}})).catch((function(e){console.error(e)}))},n.getGenres=function(){u.getGenres().then((function(e){n.state.loading||(n.setState({loading:!1,movieGenres:e.data.genres}),n.movieGenres(e.data.genres))})).catch((function(e){console.error(e)}))},n.addMovieDetail.bind(n,e),n.selectedGenre.bind(n),n.movieGenres.bind(n,e),n.movieList.bind(n,e),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"updateView",value:function(e){var t;t=this.state.movieList.filter((function(t){return t.genre_ids.indexOf(+e)>-1})),this.setState({results:t})}},{key:"componentDidMount",value:function(){this.getMovieList(),this.getGenres()}},{key:"componentWillMount",value:function(){this.removeMovieDetail()}},{key:"render",value:function(){var e=this,t=this.state;t.totalResults,t.totalPages,t.results,t.loading;return a.default.createElement("div",{className:"movieList"},a.default.createElement("h1",null,"TheMovieDb Directory!"),a.default.createElement("div",{className:"filterByGenre"},a.default.createElement("span",null,a.default.createElement("label",{for:"filter"},"> Filter by Genres"),a.default.createElement("select",{name:"filter",className:"movieGenres",value:this.state.value,onChange:this.selectedGenre},a.default.createElement("option",{value:""}),this.state.movieGenres.map((function(e){return a.default.createElement("option",{key:e.id,value:e.id},e.name)}))))),a.default.createElement("ul",null,this.state.results.map((function(t){return a.default.createElement("li",{key:t.id},a.default.createElement(c.Link,{to:"/Movie/"+t.id,onClick:e.addMovieDetail.bind(e,t)},a.default.createElement("img",{src:"https://image.tmdb.org/t/p/w500"+t.poster_path,className:"movieCard"}),a.default.createElement("h2",null,t.title),a.default.createElement("span",null,'"',t.overview,'"'),a.default.createElement("span",{className:"more"},"See more...")))}))))}}]),t}(i.Component);t.default=(0,c.withRouter)((0,l.connect)((function(e){return r({},e)}),(function(e){return{addMovieDetail:function(t){return e((0,s.addMovieDetail)(t))},removeMovieDetail:function(){return e((0,s.removeMovieDetail)())},selectedGenre:function(t){return e((0,f.selectedGenre)(t))},movieGenres:function(t){return e((0,f.movieGenres)(t))},movieList:function(t){return e((0,s.movieList)(t))}}}))(p))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.movieGenres=function(e){return function(t){t({type:"ALL_GENRES",payload:e})}},t.selectedGenre=function(e){return function(t){t({type:"SELECTED_GENRE",payload:e})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=s(i),u=(s(n(5)),function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(13))),l=n(8),c=n(6);n(25);function s(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.getDetails=function(e){var t=!1;!n.props.movieReducer.movieDetail&&(t=!0),t?u.getDetails(e).then((function(e){console.log("EXEC",e,n.props),n.setState({isLoaded:!0,data:e.data})})).catch((function(){console.error(response)})):n.setState({isLoaded:!0,data:n.props.movieReducer.movieDetail})},n.state={isLoaded:!1,data:null},n.goBack=n.goBack.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"goBack",value:function(){this.props.history.goBack()}},{key:"componentDidMount",value:function(){var e=this.props.match.params.id;this.getDetails(e)}},{key:"render",value:function(){console.log("DETT",this.props);var e=this.state,t=(e.isLoaded,e.data);return this.state.data?a.default.createElement("div",{className:"details"},a.default.createElement("div",{className:"back",onClick:this.goBack}),a.default.createElement("div",{className:"poster"},a.default.createElement("img",{src:"https://image.tmdb.org/t/p/w500"+t.poster_path,className:"movieCard"})),a.default.createElement("div",{className:"info"},a.default.createElement("h2",null,t.title),a.default.createElement("span",null,'"',t.overview,'"'))):a.default.createElement("div",null)}}]),t}(i.Component);t.default=(0,c.withRouter)((0,l.connect)((function(e,t){return r({},e)}),(function(e){return{}}))(f))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),i=a(o);a(n(5)),n(6);function a(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={loading:!1},n.goBack=n.goBack.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"goBack",value:function(){this.props.history.goBack()}},{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.state;e.totalResults,e.totalPages,e.results,e.loading;return i.default.createElement("div",{className:"advSearch"},i.default.createElement("div",{className:"back",onClick:this.goBack}),i.default.createElement("h2",null,"Advanced search"),i.default.createElement("div",null,"...I promise to realize it if you hire me ...",i.default.createElement("br",null),"Just kidding! :-D",i.default.createElement("br",null),i.default.createElement("br",null),i.default.createElement("br",null),"Frontend Challenge v1.0 realized for Global Gaming",i.default.createElement("span",null,"G.C.")))}}]),t}(o.Component);t.default=u},function(e,t,n){e.exports={root:"root",app:"app",back:"back",movieList:"movieList",filterByGenre:"filterByGenre",more:"more",details:"details",poster:"poster",info:"info",about:"about",advSearch:"advSearch",header:"header",search:"search",searchResults:"searchResults",menu:"menu",footer:"footer"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2VzbS92YWx1ZS1lcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzbS9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy9tb3ZpZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvcm9vdFJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL2dlbnJlUmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvbW92aWVSZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0F1dG9jb21wbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQWJvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTW92aWVMaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2dlbnJlQWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RldGFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQWR2U2VhcmNoLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvYnVuZGxlLnNjc3M/MzViYiJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaW5kZXhPZiIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwiaXNBcnJheSIsInZhbCIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImZvckVhY2giLCJvYmoiLCJmbiIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm1lcmdlIiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJleHRlbmQiLCJhIiwiYiIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwicmVwbGFjZSIsImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsImNoYXJBdCIsInNwbGljZU9uZSIsImxpc3QiLCJpbmRleCIsImsiLCJwb3AiLCJ0byIsImZyb20iLCJ1bmRlZmluZWQiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsInNwbGl0IiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJjb25jYXQiLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsImpvaW4iLCJzdWJzdHIiLCJ2YWx1ZU9mIiwidmFsdWVFcXVhbCIsIkFycmF5IiwiZXZlcnkiLCJpdGVtIiwiYVZhbHVlIiwiYlZhbHVlIiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIkVycm9yIiwiYWRkTGVhZGluZ1NsYXNoIiwicGF0aCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsInByZWZpeCIsInRvTG93ZXJDYXNlIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJzbGljZSIsImNyZWF0ZVBhdGgiLCJsb2NhdGlvbiIsInNlYXJjaCIsImhhc2giLCJjcmVhdGVMb2NhdGlvbiIsInN0YXRlIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJlIiwiVVJJRXJyb3IiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiYWN0aW9uIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwicHVzaCIsImZpbHRlciIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImNhblVzZURPTSIsImNyZWF0ZUVsZW1lbnQiLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwicHJvcHMiLCJ1YSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwidXNlckFnZW50IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfcmVmIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsIk1hdGgiLCJyYW5kb20iLCJ0cmFuc2l0aW9uTWFuYWdlciIsInNldFN0YXRlIiwibmV4dFN0YXRlIiwiaGFuZGxlUG9wU3RhdGUiLCJldmVudCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwiaHJlZiIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJ1cmwiLCJnZXRIYXNoUGF0aCIsInN1YnN0cmluZyIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwiYmFzZVRhZyIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwibWluIiwibWF4IiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsImVudHJpZXMiLCJtYXAiLCJlbnRyeSIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwic3BsaWNlIiwiY2FuR28iLCJoaXN0b3J5Q29udGV4dCIsImNvbnRleHQiLCJkaXNwbGF5TmFtZSIsImNyZWF0ZU5hbWVkQ29udGV4dCQxIiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsIl90aGlzIiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsInBhcmFtcyIsImlzRXhhY3QiLCJfcHJvdG8iLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVuZGVyIiwiUHJvdmlkZXIiLCJtYXRjaCIsImNoaWxkcmVuIiwiQ29tcG9uZW50IiwiTWVtb3J5Um91dGVyIiwiTGlmZWN5Y2xlIiwib25Nb3VudCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsIm9uVXBkYXRlIiwib25Vbm1vdW50IiwiUHJvbXB0IiwiX3JlZiR3aGVuIiwid2hlbiIsIkNvbnN1bWVyIiwibWV0aG9kIiwic2VsZiIsInJlbGVhc2UiLCJjYWNoZSIsImNhY2hlQ291bnQiLCJnZW5lcmF0ZVBhdGgiLCJnZW5lcmF0b3IiLCJjb21waWxlIiwiY29tcGlsZVBhdGgiLCJwcmV0dHkiLCJSZWRpcmVjdCIsImNvbXB1dGVkTWF0Y2giLCJfcmVmJHB1c2giLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwib3B0aW9ucyIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsInN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInNlbnNpdGl2ZSIsInJlZHVjZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsImVuZCIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJleGVjIiwidmFsdWVzIiwibWVtbyIsIlJvdXRlIiwiY29udGV4dCQxIiwiX3RoaXMkcHJvcHMiLCJjb21wb25lbnQiLCJiYXNlIiwiY3JlYXRlVVJMIiwic3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJub29wIiwiU3RhdGljUm91dGVyIiwiaGFuZGxlUHVzaCIsIm5hdmlnYXRlVG8iLCJoYW5kbGVSZXBsYWNlIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJfdGhpcyRwcm9wcyRiYXNlbmFtZSIsIl90aGlzJHByb3BzJGNvbnRleHQiLCJhZGRCYXNlbmFtZSIsIl90aGlzJHByb3BzMiIsIl90aGlzJHByb3BzMiRiYXNlbmFtZSIsIl90aGlzJHByb3BzMiRjb250ZXh0IiwiX3RoaXMkcHJvcHMyJGxvY2F0aW9uIiwicmVzdCIsIlN3aXRjaCIsImVsZW1lbnQiLCJDaGlsZHJlbiIsImNoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJ3aXRoUm91dGVyIiwiQyIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsInJlZiIsIldyYXBwZWRDb21wb25lbnQiLCJ1c2VDb250ZXh0IiwidXNlSGlzdG9yeSIsInVzZUxvY2F0aW9uIiwidXNlUGFyYW1zIiwidXNlUm91dGVNYXRjaCIsIkJyb3dzZXJSb3V0ZXIiLCJIYXNoUm91dGVyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsImZvcndhcmRSZWYiLCJMaW5rQW5jaG9yIiwiZm9yd2FyZGVkUmVmIiwiaW5uZXJSZWYiLCJuYXZpZ2F0ZSIsIl9vbkNsaWNrIiwib25DbGljayIsImV4IiwicHJldmVudERlZmF1bHQiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImlzTW9kaWZpZWRFdmVudCIsIkxpbmsiLCJfcmVmMiIsIl9yZWYyJGNvbXBvbmVudCIsImZvcndhcmRSZWZTaGltJDEiLCJmb3J3YXJkUmVmJDEiLCJOYXZMaW5rIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJjbGFzc05hbWUiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJzdHlsZSIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsIlJlYWN0UmVkdXhDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24iLCJiYXRjaCIsImZpcnN0IiwiY2xlYXIiLCJuZXh0Iiwic3Vic2NyaWJlIiwiaXNTdWJzY3JpYmVkIiwicHJldiIsIlN1YnNjcmlwdGlvbiIsInN0b3JlIiwicGFyZW50U3ViIiwidW5zdWJzY3JpYmUiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJCb29sZWFuIiwidHJ5VW5zdWJzY3JpYmUiLCJjb250ZXh0VmFsdWUiLCJzdWJzY3JpcHRpb24iLCJwcmV2aW91c1N0YXRlIiwiZ2V0U3RhdGUiLCJDb250ZXh0IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIkVNUFRZX0FSUkFZIiwiTk9fU1VCU0NSSVBUSU9OX0FSUkFZIiwic3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyIiwidXBkYXRlQ291bnQiLCJwYXlsb2FkIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzIiwiZWZmZWN0RnVuYyIsImVmZmVjdEFyZ3MiLCJkZXBlbmRlbmNpZXMiLCJjYXB0dXJlV3JhcHBlclByb3BzIiwibGFzdFdyYXBwZXJQcm9wcyIsImxhc3RDaGlsZFByb3BzIiwicmVuZGVySXNTY2hlZHVsZWQiLCJ3cmFwcGVyUHJvcHMiLCJhY3R1YWxDaGlsZFByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsImN1cnJlbnQiLCJzdWJzY3JpYmVVcGRhdGVzIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImVycm9yIiwibGF0ZXN0U3RvcmVTdGF0ZSIsImluaXRTdGF0ZVVwZGF0ZXMiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZjIkbWV0aG9kTmFtZSIsIl9yZWYyJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYyJHNob3VsZEhhbmRsZVN0YSIsIl9yZWYyJHN0b3JlS2V5Iiwic3RvcmVLZXkiLCJfcmVmMiRmb3J3YXJkUmVmIiwid2l0aFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIndyYXBwZWRDb21wb25lbnROYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInB1cmUiLCJ1c2VQdXJlT25seU1lbW8iLCJDb25uZWN0RnVuY3Rpb24iLCJfdXNlTWVtbyIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImRpc3BhdGNoIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwiaXMiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiYXJnIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjcmVhdGVDb25uZWN0IiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjMiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJjcmVhdGVTdG9yZUhvb2siLCJ1c2VSZWR1eENvbnRleHQiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VTdG9yZSIsInVzZURpc3BhdGNoIiwicmVmRXF1YWxpdHkiLCJjcmVhdGVTZWxlY3Rvckhvb2siLCJzZWxlY3RvciIsImVxdWFsaXR5Rm4iLCJfdXNlUmVkdXhDb250ZXh0IiwiY29udGV4dFN1YiIsInNlbGVjdGVkU3RhdGUiLCJmb3JjZVJlbmRlciIsImxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IiLCJsYXRlc3RTZWxlY3RvciIsImxhdGVzdFNlbGVjdGVkU3RhdGUiLCJlcnIiLCJzdGFjayIsIm5ld1NlbGVjdGVkU3RhdGUiLCJ1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbiIsIm5ld0JhdGNoIiwidXNlU2VsZWN0b3IiLCJyYW5kb21TdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm9ic2VydmFibGUiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwiVHlwZUVycm9yIiwib2JzZXJ2ZVN0YXRlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiU3RyaW5nIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfaSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJfZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsInN5bSIsIl9vYmplY3RTcHJlYWQyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJjb21wb3NlIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImNvbnNvbGUiLCJnZXRNb3ZpZUxpc3QiLCJheGlvcyIsIlJPT1RfVVJMIiwiZ2V0RGV0YWlscyIsIm1vdmllSWQiLCJBUElfS0VZIiwiZ2V0U2VhcmNoIiwiaW5wdXQiLCJTRUFSQ0hfVVJMIiwiZ2V0R2VucmVzIiwiR0VOUkVTX1VSTCIsInV0aWxzIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImFkYXB0ZXIiLCJkZWZhdWx0cyIsIlhNTEh0dHBSZXF1ZXN0IiwicHJvY2VzcyIsInRyYW5zZm9ybVJlcXVlc3QiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsInRyYW5zZm9ybVJlc3BvbnNlIiwicGFyc2UiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsInJvb3QiLCJnbG9iYWwiLCJjb21tb25qc0dsb2JhbCIsImdsb2JhbFRoaXMiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJoYW5kbGVycyIsIm9uIiwiaGFuZGxlciIsIm9mZiIsImgiLCJzZXQiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiZGVmYXVsdFZhbHVlIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIl9Db21wb25lbnQiLCJlbWl0dGVyIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiaXNSZXF1aXJlZCIsIl9Db21wb25lbnQyIiwiX3RoaXMyIiwiZ2V0VmFsdWUiLCJvYnNlcnZlZEJpdHMiLCJfcHJvdG8yIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwiUmVnRXhwIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJvZmZzZXQiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsInRvVXBwZXJDYXNlIiwibWF0Y2hlcyIsImZsYWdzIiwib3B0cyIsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwic2VnbWVudCIsImoiLCJ0ZXN0IiwiYXR0YWNoS2V5cyIsInJlIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJnIiwiRnVuY3Rpb24iLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiY29uZmlnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJvcGVuIiwicGFyYW1zU2VyaWFsaXplciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsIiwibW92aWVBY3Rpb24iLCJhZGRNb3ZpZURldGFpbCIsIm1vdmllRGV0YWlsIiwicmVtb3ZlTW92aWVEZXRhaWwiLCJtb3ZpZUxpc3QiLCJtb3ZpZXMiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJSZWFjdERPTSIsImdldEVsZW1lbnRCeUlkIiwiZm9yIiwicSIsInUiLCJ2IiwidyIsInoiLCJBIiwiQiIsIml0ZXJhdG9yIiwiRCIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJFIiwiRiIsInJlZnMiLCJ1cGRhdGVyIiwiRyIsIkgiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm9yY2VVcGRhdGUiLCJJIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJKIiwiSyIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJmIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJPIiwiUCIsIlEiLCJSIiwia2V5UHJlZml4IiwiZnVuYyIsImNvdW50IiwiUyIsIlYiLCJUIiwiVSIsImRvbmUiLCJlc2NhcGUiLCJXIiwiYWEiLCJYIiwiTiIsIlkiLCJaIiwiYmEiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJ0b0FycmF5Iiwib25seSIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInVzZUNhbGxiYWNrIiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidmVyc2lvbiIsIm9uRXJyb3IiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImN1cnJlbnRUYXJnZXQiLCJrYSIsInBhIiwicWEiLCJyYSIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwiVWEiLCJWYSIsInhsaW5rSHJlZiIsIldhIiwiWGEiLCJTYSIsImlzTmFOIiwiVGEiLCJSYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsInBiIiwicWIiLCJ0YWciLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsInJiIiwic2IiLCJub2RlTmFtZSIsInhiIiwiX3ZhbHVlVHJhY2tlciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwidGIiLCJ5YiIsImNoZWNrZWQiLCJ6YiIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJJYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiSmIiLCJLYiIsIkxiIiwidGV4dENvbnRlbnQiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiUmIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsIlNiIiwiVGIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYiIsIlZiIiwiV2IiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiV2Vha01hcCIsIk1hcCIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsInNpYmxpbmciLCJnYyIsImljIiwiamMiLCJrYyIsImxjIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsIm9jIiwicGMiLCJxYyIsInRvcExldmVsVHlwZSIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsInJjIiwiZXZlbnRTeXN0ZW1GbGFncyIsInNjIiwiY29udGFpbmVySW5mbyIsInRjIiwidWMiLCJoYXMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiS2MiLCJibG9ja2VkT24iLCJjb250YWluZXIiLCJMYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIk1jIiwiTmMiLCJQYyIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsIlFjIiwiUmMiLCJTYyIsIlRjIiwic2hpZnQiLCJVYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIlZjIiwiV2MiLCJZYyIsIlpjIiwiJGMiLCJhZCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImV2ZW50UHJpb3JpdHkiLCJiZCIsImNkIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiaWQiLCJPYyIsImpkIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJrZCIsImxkIiwibWQiLCJzZXRQcm9wZXJ0eSIsIm5kIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwib2QiLCJwZCIsInFkIiwicmQiLCJzZCIsInRkIiwiYm9keSIsInVkIiwidmQiLCJub2RlIiwibmV4dFNpYmxpbmciLCJ4ZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiRGQiLCJFZCIsIkZkIiwiYXV0b0ZvY3VzIiwiR2QiLCJfX2h0bWwiLCJIZCIsInNldFRpbWVvdXQiLCJJZCIsImNsZWFyVGltZW91dCIsIkpkIiwiS2QiLCJwcmV2aW91c1NpYmxpbmciLCJMZCIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJkaXNwYXRjaENvbmZpZyIsIlVkIiwiX3RhcmdldEluc3QiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImJlIiwiY2UiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImVlIiwiZXZlbnRQb29sIiwiZmUiLCJkZXN0cnVjdG9yIiwiZGUiLCJnZXRQb29sZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJkb2N1bWVudE1vZGUiLCJsZSIsIm1lIiwibmUiLCJvZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJwZSIsInFlIiwia2V5Q29kZSIsImRldGFpbCIsInNlIiwidmUiLCJsb2NhbGUiLCJ3aGljaCIsInRlIiwiY2hhciIsInVlIiwid2UiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiZGV0YWNoRXZlbnQiLCJIZSIsIkllIiwiYXR0YWNoRXZlbnQiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJPZSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZSIsImdldE1vZGlmaWVyU3RhdGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJXZSIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInNlbGVjdCIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0Iiwia2YiLCJvblNlbGVjdCIsImxmIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm1mIiwiY2xpcGJvYXJkRGF0YSIsIm5mIiwib2YiLCJjaGFyQ29kZSIsInBmIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInFmIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInJmIiwic2YiLCJkYXRhVHJhbnNmZXIiLCJ0ZiIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ1ZiIsInZmIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ3ZiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkhmIiwiSWYiLCJKZiIsIktmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJMZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIk1mIiwidW5zdGFibGVfbm93IiwiTmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIk9mIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJQZiIsIlFmIiwiUmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIlNmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiVGYiLCJVZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJ4ZyIsInlnIiwiemciLCJjYSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkpnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdnIiwiSGciLCJJZyIsIktnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTGciLCJNZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTmciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJPZyIsIlBnIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsImVsZW1lbnRUeXBlIiwiVWciLCJpbXBsZW1lbnRhdGlvbiIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsImVoIiwiZmgiLCJnaCIsImhoIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiaWgiLCJyZXNwb25kZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwicXVldWUiLCJ1aCIsInZoIiwid2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJkZXN0cm95IiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiZ2kiLCJoaSIsInBlbmRpbmdDb250ZXh0IiwibmkiLCJwaSIsInFpIiwiaWkiLCJyZXRyeVRpbWUiLCJqaSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJraSIsImxpIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIm1pIiwicmkiLCJzaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiV2Vha1NldCIsIlNldCIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJmb2N1cyIsIktpIiwiTGkiLCJEaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJpbnN0YW5jZSIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJSaSIsIlNpIiwiVGkiLCJkaXNwbGF5IiwiVWkiLCJWaSIsImFkZCIsIldpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJjb21wb25lbnREaWRDYXRjaCIsImFqIiwiY29tcG9uZW50U3RhY2siLCJSaiIsImJqIiwiY2VpbCIsImNqIiwiZGoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJ0aW1lb3V0TXMiLCJ4aiIsInlqIiwiemoiLCJsYXN0RXhwaXJlZFRpbWUiLCJBaiIsImZpcnN0UGVuZGluZ1RpbWUiLCJsYXN0UGluZ2VkVGltZSIsIm5leHRLbm93blBlbmRpbmdMZXZlbCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2FsbGJhY2tOb2RlIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZEV4cGlyYXRpb25UaW1lIiwibGFzdFN1c3BlbmRlZFRpbWUiLCJJaiIsInRpbWVvdXRIYW5kbGUiLCJKaiIsImJ1c3lNaW5EdXJhdGlvbk1zIiwiYnVzeURlbGF5TXMiLCJLaiIsIk1qIiwiTmoiLCJwaW5nQ2FjaGUiLCJPaiIsInViIiwiUGoiLCJYYyIsIlFqIiwiU2oiLCJmaXJzdFN1c3BlbmRlZFRpbWUiLCJyYW5nZUNvdW50Iiwid2IiLCJhY3RpdmVFbGVtZW50RGV0YWNoZWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiVGoiLCJ3ZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsInZiIiwiVWoiLCJWaiIsIldqIiwiaGlkZGVuIiwiZGVmYXVsdCIsIm9iIiwiWGoiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsInBlbmRpbmdDaGlsZHJlbiIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsIkpjIiwiX2ludGVybmFsUm9vdCIsImdrIiwiaWsiLCJoYXNBdHRyaWJ1dGUiLCJoayIsImprIiwia2siLCJ1bm1vdW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJMaiIsImxrIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIllqIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInBlcmZvcm1hbmNlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmbG9vciIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkxhenkiLCJQb3J0YWwiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsImFyciIsInJvb3RSZWR1Y2VyIiwidGh1bmsiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50Iiwid2l0aEV4dHJhQXJndW1lbnQiLCJtb3ZpZVJlZHVjZXIiLCJnZW5yZVJlZHVjZXIiLCJtb3ZpZUdlbnJlcyIsInNlbGVjdGVkR2VucmUiLCJBcHAiLCJNb3ZpZUxpc3QiLCJBYm91dCIsIkFkdlNlYXJjaCIsImNvbm5lY3QiLCJhcGkiLCJBdXRvY29tcGxldGUiLCJnZXRJbmZvIiwidXNlcklucHV0IiwicmVzdWx0QXJyIiwicmVzdWx0cyIsIm1vdmllIiwidGl0bGUiLCJjYXRjaCIsIm9uQ2hhbmdlIiwic3VnZ2VzdGlvbnMiLCJhY3RpdmVTdWdnZXN0aW9uIiwic2hvd1N1Z2dlc3Rpb25zIiwiaW5uZXJUZXh0Iiwib25LZXlEb3duIiwic2V0V3JhcHBlclJlZiIsImhhbmRsZUNsaWNrT3V0c2lkZSIsIndyYXBwZXJSZWYiLCJzdWdnZXN0aW9uc0xpc3RDb21wb25lbnQiLCJzdWdnZXN0aW9uIiwiZGVmYXVsdFByb3BlcnR5IiwiQXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsImxlbiIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJub3JtYWxpemVkTmFtZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJ0b0lTT1N0cmluZyIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJyZXF1ZXN0VVJMIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImJhc2VVUkwiLCJyZWFzb24iLCJmbnMiLCJyZWxhdGl2ZVVSTCIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJsb2FkaW5nIiwidG90YWxSZXN1bHRzIiwidG90YWxQYWdlcyIsInNlbElkIiwidXBkYXRlVmlldyIsImdlbnJlcyIsInRvdGFsX3Jlc3VsdHMiLCJ0b3RhbF9wYWdlcyIsImdlbnJlSWQiLCJmaWx0ZXJlZFJlc3VsdHMiLCJzcmMiLCJwb3N0ZXJfcGF0aCIsIm92ZXJ2aWV3IiwiRGV0YWlscyIsImZsYWdGZXRjaERhdGEiLCJsb2ciLCJpc0xvYWRlZCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcs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TyxPQUFPLE1BQVEsUUFBUSxVQUFZLFlBQVksT0FBUyxTQUFTLE9BQVMsU0FBUyxjQUFnQixnQkFBZ0IsS0FBTyxPQUFPLE9BQVMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDI3KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJmdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgPyBvYmoudmFsdWVPZigpIDogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIC8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheShiKSAmJlxuICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICBhLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IHZhbHVlT2YoYSk7XG4gICAgdmFyIGJWYWx1ZSA9IHZhbHVlT2YoYik7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGEsIGIpKS5ldmVyeShmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0JDEgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0JDEoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KGhpc3RvcnlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaGlzdG9yeVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgTGlmZWN5Y2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlmZWN5Y2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaWZlY3ljbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91bnQpIHRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVW5tb3VudCkgdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBMaWZlY3ljbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KF9yZWYpIHtcbiAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2UsXG4gICAgICBfcmVmJHdoZW4gPSBfcmVmLndoZW4sXG4gICAgICB3aGVuID0gX3JlZiR3aGVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR3aGVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IGNvbnRleHQuc3RhdGljQ29udGV4dDtcbiAgICB2YXIgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcykgOiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgIH0pIDogdG8pOyAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuXG4gICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQxKSB7XG4gICAgICAhY29udGV4dCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQxLm1hdGNoO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogcmVuZGVyID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cblxudmFyIFN0YXRpY1JvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RhdGljUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmF2aWdhdGVUbyA9IGZ1bmN0aW9uIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wcyRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcyRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJGNvbnRleHQ7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMiRiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wczIkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkY29udGV4dCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzMiRsb2NhdGlvbiA9PT0gdm9pZCAwID8gXCIvXCIgOiBfdGhpcyRwcm9wczIkbG9jYXRpb24sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgIHN0YXRpY0NvbnRleHQ6IGNvbnRleHRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2l0Y2gucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcywge1xuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgIH0pKSA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBjb21wdXRlZE1hdGNoOiBtYXRjaFxuICAgICAgfSkgOiBudWxsO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cblxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcblxuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgY29udGV4dCwge1xuICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxudmFyIHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0O1xuZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUhpc3RvcnkoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChoaXN0b3J5Q29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkubG9jYXRpb247XG59XG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaC5wYXJhbXMgOiB7fTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlTWF0Y2gocGF0aCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBwYXRoKSA6IG1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBoaXN0b3J5Q29udGV4dCBhcyBfX0hpc3RvcnlDb250ZXh0LCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhhc2hIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSGFzaFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50ICovXG5cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5O1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB2YXIgaHJlZiA9IGxvY2F0aW9uID8gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbiBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic2Vuc2l0aXZlXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksIGN1cnJlbnRMb2NhdGlvbik7XG4gICAgdmFyIHBhdGggPSB0b0xvY2F0aW9uLnBhdGhuYW1lOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gICAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmUsXG4gICAgICBzdHJpY3Q6IHN0cmljdFxuICAgIH0pIDogbnVsbDtcbiAgICB2YXIgaXNBY3RpdmUgPSAhIShpc0FjdGl2ZVByb3AgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGN1cnJlbnRMb2NhdGlvbikgOiBtYXRjaCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IGlzQWN0aXZlID8gam9pbkNsYXNzbmFtZXMoY2xhc3NOYW1lUHJvcCwgYWN0aXZlQ2xhc3NOYW1lKSA6IGNsYXNzTmFtZVByb3A7XG4gICAgdmFyIHN0eWxlID0gaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGVQcm9wLCB7fSwgYWN0aXZlU3R5bGUpIDogc3R5bGVQcm9wO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvTG9jYXRpb25cbiAgICB9LCByZXN0KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSQxICE9PSBmb3J3YXJkUmVmJDEpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xuICB2YXIgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIF9wcm90by50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSksXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlUmVmLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JzsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxudmFyIEVNUFRZX0FSUkFZID0gW107XG52YXIgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdO1xuXG52YXIgc3RyaW5naWZ5Q29tcG9uZW50ID0gZnVuY3Rpb24gc3RyaW5naWZ5Q29tcG9uZW50KENvbXApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHZhciB1cGRhdGVDb3VudCA9IHN0YXRlWzFdO1xuICByZXR1cm4gW2FjdGlvbi5wYXlsb2FkLCB1cGRhdGVDb3VudCArIDFdO1xufVxuXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoZWZmZWN0RnVuYywgZWZmZWN0QXJncywgZGVwZW5kZW5jaWVzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlZmZlY3RGdW5jLmFwcGx5KHZvaWQgMCwgZWZmZWN0QXJncyk7XG4gIH0sIGRlcGVuZGVuY2llcyk7XG59XG5cbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMobGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKSB7XG4gIC8vIElmIHdlJ3JlIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSwgbm90aGluZyB0byBkbyBoZXJlXG4gIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIENhcHR1cmUgdmFsdWVzIGZvciBjaGVja2luZyBpZiBhbmQgd2hlbiB0aGlzIGNvbXBvbmVudCB1bm1vdW50c1xuXG4gIHZhciBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICB2YXIgbGFzdFRocm93bkVycm9yID0gbnVsbDsgLy8gV2UnbGwgcnVuIHRoaXMgY2FsbGJhY2sgZXZlcnkgdGltZSBhIHN0b3JlIHN1YnNjcmlwdGlvbiB1cGRhdGUgcHJvcGFnYXRlcyB0byB0aGlzIGNvbXBvbmVudFxuXG4gIHZhciBjaGVja0ZvclVwZGF0ZXMgPSBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlKSB7XG4gICAgICAvLyBEb24ndCBydW4gc3RhbGUgbGlzdGVuZXJzLlxuICAgICAgLy8gUmVkdXggZG9lc24ndCBndWFyYW50ZWUgdW5zdWJzY3JpcHRpb25zIGhhcHBlbiB1bnRpbCBuZXh0IGRpc3BhdGNoLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB2YXIgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gZTtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBfZGlkXyBjaGFuZ2UgKG9yIHdlIGNhdWdodCBhbiBlcnJvciksIHRoaXMgd3JhcHBlciBjb21wb25lbnQgbmVlZHMgdG8gcmUtcmVuZGVyXG5cbiAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU1RPUkVfVVBEQVRFRCcsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgdmFyIHVuc3Vic2NyaWJlV3JhcHBlciA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlV3JhcHBlcigpIHtcbiAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuXG4gICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufVxuXG52YXIgaW5pdFN0YXRlVXBkYXRlcyA9IGZ1bmN0aW9uIGluaXRTdGF0ZVVwZGF0ZXMoKSB7XG4gIHJldHVybiBbbnVsbCwgMF07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxyXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXHJcbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XHJcbiAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XHJcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXHJcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcclxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxyXG4gICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXHJcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXHJcbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cclxuICAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXHJcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXHJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxyXG4qL1xuc2VsZWN0b3JGYWN0b3J5LCAvLyBvcHRpb25zIG9iamVjdDpcbl9yZWYpIHtcbiAgaWYgKF9yZWYgPT09IHZvaWQgMCkge1xuICAgIF9yZWYgPSB7fTtcbiAgfVxuXG4gIHZhciBfcmVmMiA9IF9yZWYsXG4gICAgICBfcmVmMiRnZXREaXNwbGF5TmFtZSA9IF9yZWYyLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmMiRnZXREaXNwbGF5TmFtZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gXCJDb25uZWN0QWR2YW5jZWQoXCIgKyBuYW1lICsgXCIpXCI7XG4gIH0gOiBfcmVmMiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYyJG1ldGhvZE5hbWUgPSBfcmVmMi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYyJG1ldGhvZE5hbWUgPT09IHZvaWQgMCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZjIkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYyJHJlbmRlckNvdW50UHJvcCA9IF9yZWYyLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYyJHJlbmRlckNvdW50UHJvcCA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZjIkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZjIkc2hvdWxkSGFuZGxlU3RhID0gX3JlZjIuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZjIkc2hvdWxkSGFuZGxlU3RhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkc2hvdWxkSGFuZGxlU3RhLFxuICAgICAgX3JlZjIkc3RvcmVLZXkgPSBfcmVmMi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZjIkc3RvcmVLZXkgPT09IHZvaWQgMCA/ICdzdG9yZScgOiBfcmVmMiRzdG9yZUtleSxcbiAgICAgIF9yZWYyJHdpdGhSZWYgPSBfcmVmMi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYyJHdpdGhSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkd2l0aFJlZixcbiAgICAgIF9yZWYyJGZvcndhcmRSZWYgPSBfcmVmMi5mb3J3YXJkUmVmLFxuICAgICAgZm9yd2FyZFJlZiA9IF9yZWYyJGZvcndhcmRSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZm9yd2FyZFJlZixcbiAgICAgIF9yZWYyJGNvbnRleHQgPSBfcmVmMi5jb250ZXh0LFxuICAgICAgY29udGV4dCA9IF9yZWYyJGNvbnRleHQgPT09IHZvaWQgMCA/IFJlYWN0UmVkdXhDb250ZXh0IDogX3JlZjIkY29udGV4dCxcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImdldERpc3BsYXlOYW1lXCIsIFwibWV0aG9kTmFtZVwiLCBcInJlbmRlckNvdW50UHJvcFwiLCBcInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlc1wiLCBcInN0b3JlS2V5XCIsIFwid2l0aFJlZlwiLCBcImZvcndhcmRSZWZcIiwgXCJjb250ZXh0XCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChyZW5kZXJDb3VudFByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhSZWYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcblxuICAgIGlmIChzdG9yZUtleSAhPT0gJ3N0b3JlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgZm9yd2FyZGVkUmVmID0gcHJvcHMuZm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcImZvcndhcmRlZFJlZlwiXSk7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCBmb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc107XG4gICAgICB9LCBbcHJvcHNdKSxcbiAgICAgICAgICBwcm9wc0NvbnRleHQgPSBfdXNlTWVtb1swXSxcbiAgICAgICAgICBmb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lcihSZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dC5cbiAgICAgIC8vIFdlJ2xsIGNoZWNrIHRvIHNlZSBpZiBpdCBfbG9va3NfIGxpa2UgYSBSZWR1eCBzdG9yZSBmaXJzdC5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIHBhc3MgdGhyb3VnaCBhIGBzdG9yZWAgcHJvcCB0aGF0IGlzIGp1c3QgYSBwbGFpbiB2YWx1ZS5cblxuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZ2V0U3RhdGUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWRpZFN0b3JlQ29tZUZyb21Qcm9wcyAmJiAhZGlkU3RvcmVDb21lRnJvbUNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgXFxcInN0b3JlXFxcIiBpbiB0aGUgY29udGV4dCBvZiBcIiArIChcIlxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBcIikgKyBcIm9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBcIiArIChcIlJlYWN0IGNvbnRleHQgY29uc3VtZXIgdG8gXCIgKyBkaXNwbGF5TmFtZSArIFwiIGluIGNvbm5lY3Qgb3B0aW9ucy5cIikpO1xuICAgICAgfSAvLyBCYXNlZCBvbiB0aGUgcHJldmlvdXMgY2hlY2ssIG9uZSBvZiB0aGVzZSBtdXN0IGJlIHRydWVcblxuXG4gICAgICB2YXIgc3RvcmUgPSBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBwcm9wcy5zdG9yZSA6IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSk7XG4gICAgICB9LCBbc3RvcmVdKTtcblxuICAgICAgdmFyIF91c2VNZW1vMiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKHN1YnNjcmliZVVwZGF0ZXMsIFtzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoXSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0sIFtmb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfSAvLyBJZiB3ZSdyZSBpbiBcInB1cmVcIiBtb2RlLCBlbnN1cmUgb3VyIHdyYXBwZXIgY29tcG9uZW50IG9ubHkgcmUtcmVuZGVycyB3aGVuIGluY29taW5nIHByb3BzIGhhdmUgY2hhbmdlZC5cblxuXG4gICAgdmFyIENvbm5lY3QgPSBwdXJlID8gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pIDogQ29ubmVjdEZ1bmN0aW9uO1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgZm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsImZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHt9LCBzdGF0ZVByb3BzLCB7fSwgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXHJcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcclxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxyXG5cclxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xyXG4gIFxyXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXHJcblxyXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxyXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXHJcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cclxuXHJcbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXHJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxyXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdFxuLyojX19QVVJFX18qL1xuY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcclxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlO1xuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VTdG9yZSA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTdG9yZUhvb2soKTsiLCJpbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VTdG9yZSBhcyB1c2VEZWZhdWx0U3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vdXNlU3RvcmUnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVN0b3JlID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0U3RvcmUgOiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VEaXNwYXRjaCgpIHtcbiAgICB2YXIgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaDtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBgZGlzcGF0Y2hgIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fGZ1bmN0aW9ufSByZWR1eCBzdG9yZSdzIGBkaXNwYXRjaGAgZnVuY3Rpb25cclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xyXG4gKiAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxyXG4gKiAgIGNvbnN0IGluY3JlYXNlQ291bnRlciA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKHsgdHlwZTogJ2luY3JlYXNlLWNvdW50ZXInIH0pLCBbXSlcclxuICogICByZXR1cm4gKFxyXG4gKiAgICAgPGRpdj5cclxuICogICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cclxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtpbmNyZWFzZUNvdW50ZXJ9PkluY3JlYXNlIGNvdW50ZXI8L2J1dHRvbj5cclxuICogICAgIDwvZGl2PlxyXG4gKiAgIClcclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VEaXNwYXRjaCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVEaXNwYXRjaEhvb2soKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKHt9KTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yc1wiKTtcbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHJldHVybiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImltcG9ydCBQcm92aWRlciBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0L2Nvbm5lY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vayB9IGZyb20gJy4vaG9va3MvdXNlRGlzcGF0Y2gnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vayB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vaG9va3MvdXNlU3RvcmUnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi91dGlscy9zaGFsbG93RXF1YWwnO1xuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgUHJvdmlkZXIsIGNvbm5lY3RBZHZhbmNlZCwgUmVhY3RSZWR1eENvbnRleHQsIGNvbm5lY3QsIGJhdGNoLCB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rLCB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rLCB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rLCBzaGFsbG93RXF1YWwgfTsiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICB9XG5cbiAgaWYgKGVudW1lcmFibGVPbmx5KSBrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICB9KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBsaW5lYnJlYWstc3R5bGUgKi9cclxuXHJcblxyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5cclxuXHJcbmNvbnN0IFJPT1RfVVJMID0gXCJodHRwczovL2FwaS50aGVtb3ZpZWRiLm9yZy8zL2Rpc2NvdmVyL21vdmllP2FwaV9rZXk9MmQ3YjczZjQ1NTg0MjA0N2FiOTMxZGFjMmM5YTFiNjUmbGFuZ3VhZ2U9ZW4tVVMmc29ydF9ieT12b3RlX2NvdW50LmRlc2MmaW5jbHVkZV9hZHVsdD1mYWxzZSZpbmNsdWRlX3ZpZGVvPWZhbHNlJnBhZ2U9MVwiO1xyXG5jb25zdCBERVRBSUxTX1VSTCAgID0gXCJodHRwczovL2FwaS50aGVtb3ZpZWRiLm9yZy8zL21vdmllL1wiO1xyXG5cclxuY29uc3QgQVBJX0tFWSA9IFwiMmQ3YjczZjQ1NTg0MjA0N2FiOTMxZGFjMmM5YTFiNjVcIjtcclxuY29uc3QgU0VBUkNIX1VSTCA9IFwiaHR0cHM6Ly9hcGkudGhlbW92aWVkYi5vcmcvMy9zZWFyY2gvbW92aWVcIjtcclxuY29uc3QgR0VOUkVTX1VSTCA9IFwiaHR0cHM6Ly9hcGkudGhlbW92aWVkYi5vcmcvMy9nZW5yZS9tb3ZpZS9saXN0XCI7XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW92aWVMaXN0IChkYXRlID0gXCJcIikge1xyXG4gICAgcmV0dXJuIGF4aW9zLmdldChgJHtST09UX1VSTH1gKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERldGFpbHMgKG1vdmllSWQpIHtcclxuICAgIHJldHVybiBheGlvcy5nZXQoYCR7REVUQUlMU19VUkx9JHttb3ZpZUlkfT9hcGlfa2V5PSR7QVBJX0tFWX0mbGFuZ3VhZ2U9ZW4tVVNgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlYXJjaCAoaW5wdXQpIHtcclxuICAgIHJldHVybiBheGlvcy5nZXQoYCR7U0VBUkNIX1VSTH0/YXBpX2tleT0ke0FQSV9LRVl9JnF1ZXJ5PSR7aW5wdXR9JmxpbWl0PTEwMCZsYW5ndWFnZT1lbi1VU2ApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHZW5yZXMoKSB7XHJcbiAgICByZXR1cm4gYXhpb3MuZ2V0KGAke0dFTlJFU19VUkx9P2FwaV9rZXk9JHtBUElfS0VZfSZsaW1pdD0xMDAmbGFuZ3VhZ2U9ZW4tVVNgKVxyXG59XHJcblxyXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLndpdGhDcmVkZW50aWFscykge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJleHBvcnQgY29uc3QgbW92aWVBY3Rpb24gPSAoKSA9PiBkaXNwYXRjaCA9PiB7XHJcbiAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgdHlwZTogJ01PVklFX0FDVElPTicsXHJcbiAgICAgICAgcGF5bG9hZDogJ3Jlc3VsdF9vZl9tb3ZpZV9hY3Rpb24nXHJcbiAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYWRkTW92aWVEZXRhaWwgPSAobW92aWVEZXRhaWwpID0+IGRpc3BhdGNoID0+IHtcclxuICAgIC8vY29uc29sZS5sb2coXCJBQ1RJT05cIixtb3ZpZURldGFpbClcclxuICAgIGRpc3BhdGNoKHtcclxuICAgICAgICB0eXBlOiBcIkFERF9NT1ZJRV9ERVRBSUxcIixcclxuICAgICAgICBwYXlsb2FkOiAgey4uLm1vdmllRGV0YWlsfVxyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZU1vdmllRGV0YWlsID0gKCkgPT4gZGlzcGF0Y2ggPT4ge1xyXG4gICAgZGlzcGF0Y2goe1xyXG4gICAgICAgIHR5cGU6IFwiUkVNT1ZFX01PVklFX0RFVEFJTFwiLFxyXG4gICAgICAgIHBheWxvYWQ6ICBudWxsXHJcbiAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbW92aWVMaXN0ID0gKG1vdmllcykgPT4gZGlzcGF0Y2ggPT4ge1xyXG4gICAgZGlzcGF0Y2goe1xyXG4gICAgICAgIHR5cGU6IFwiTU9WSUVfTElTVFwiLFxyXG4gICAgICAgIHBheWxvYWQ6ICB7Li4ubW92aWVzfVxyXG4gICAgfSlcclxufVxyXG5cclxuXHJcblxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgU3dpdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICcuL3N0b3JlJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuXG5SZWFjdERPTS5yZW5kZXIoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtjb25maWd1cmVTdG9yZSgpfT5cbiAgICAgICAgPFJvdXRlcj5cbiAgICAgICAgICAgIDxBcHAgLz5cbiAgICAgICAgPC9Sb3V0ZXI+XG4gICAgPC9Qcm92aWRlcj4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jylcbik7XG5cbi8vIElmIHlvdSB3YW50IHlvdXIgYXBwIHRvIHdvcmsgb2ZmbGluZSBhbmQgbG9hZCBmYXN0ZXIsIHlvdSBjYW4gY2hhbmdlXG4vLyB1bnJlZ2lzdGVyKCkgdG8gcmVnaXN0ZXIoKSBiZWxvdy4gTm90ZSB0aGlzIGNvbWVzIHdpdGggc29tZSBwaXRmYWxscy5cbi8vIExlYXJuIG1vcmUgYWJvdXQgc2VydmljZSB3b3JrZXJzOiBodHRwczovL2JpdC5seS9DUkEtUFdBXG4vL3VucmVnaXN0ZXIoKTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjEzLjFcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTkuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IHRodW5rIGZyb20gXCJyZWR1eC10aHVua1wiO1xyXG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSBcIi4vcmVkdWNlcnMvcm9vdFJlZHVjZXJcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25maWd1cmVTdG9yZSgpIHtcclxuICAgIHJldHVybiBjcmVhdGVTdG9yZShcclxuICAgICAgICByb290UmVkdWNlcixcclxuICAgICAgICBhcHBseU1pZGRsZXdhcmUodGh1bmspXHJcbiAgICApO1xyXG59IiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCBnZW5yZVJlZHVjZXIgZnJvbSAnLi9nZW5yZVJlZHVjZXInO1xyXG5pbXBvcnQgbW92aWVSZWR1Y2VyIGZyb20gXCIuL21vdmllUmVkdWNlclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgICBtb3ZpZVJlZHVjZXIsXHJcbiAgICBnZW5yZVJlZHVjZXJcclxufSk7XHJcbiIsImV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IHt9LCBhY3Rpb24pID0+IHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuXHJcbiAgICAgICAgY2FzZSAnQUxMX0dFTlJFUyc6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAvLy4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgbW92aWVHZW5yZXM6IGFjdGlvbi5wYXlsb2FkXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBjYXNlICdTRUxFQ1RFRF9HRU5SRSc6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAvLy4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRHZW5yZTogYWN0aW9uLnBheWxvYWRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IHt9LCBhY3Rpb24pID0+IHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlICdNT1ZJRV9BQ1RJT04nOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBhY3Rpb24ucGF5bG9hZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAnQUREX01PVklFX0RFVEFJTCc6XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJBRERNT1ZJRVJFRFVDRVJcIiwgYWN0aW9uKVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLy8uLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIC8vbW92aWVEZXRhaWw6IFsuLi5zdGF0ZS5tb3ZpZURldGFpbF1cclxuICAgICAgICAgICAgICAgIG1vdmllRGV0YWlsOiBhY3Rpb24ucGF5bG9hZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAnUkVNT1ZFX01PVklFX0RFVEFJTCc6XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJBRERNT1ZJRVJFRFVDRVJcIiwgYWN0aW9uKVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLy8uLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIC8vbW92aWVEZXRhaWw6IFsuLi5zdGF0ZS5tb3ZpZURldGFpbF1cclxuICAgICAgICAgICAgICAgIG1vdmllRGV0YWlsOiBhY3Rpb24ucGF5bG9hZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAnTU9WSUVfTElTVCc6XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJBRERNT1ZJRVJFRFVDRVJcIiwgYWN0aW9uKVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLy8uLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIC8vbW92aWVEZXRhaWw6IFsuLi5zdGF0ZS5tb3ZpZURldGFpbF1cclxuICAgICAgICAgICAgICAgIG1vdmllTGlzdDogYWN0aW9uLnBheWxvYWRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgU3dpdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi9jb21wb25lbnRzL0hlYWRlclwiO1xuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi9jb21wb25lbnRzL0Zvb3RlclwiO1xuaW1wb3J0IEFib3V0IGZyb20gXCIuL2NvbXBvbmVudHMvQWJvdXRcIjtcbmltcG9ydCBNb3ZpZUxpc3QgZnJvbSBcIi4vY29tcG9uZW50cy9Nb3ZpZUxpc3RcIjtcbmltcG9ydCBEZXRhaWxzIGZyb20gXCIuL2NvbXBvbmVudHMvRGV0YWlsc1wiO1xuaW1wb3J0IEFkdlNlYXJjaCBmcm9tIFwiLi9jb21wb25lbnRzL0FkdlNlYXJjaFwiO1xuXG5cbmNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XG5cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGJyb3dzZXJIaXN0b3J5O1xuXG4gICAgICAgIHJldHVybiAoXG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXBwXCI+XG4gICAgICAgICAgICAgICAgPEhlYWRlciAvPlxuXG4gICAgICAgICAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgY29tcG9uZW50PXtNb3ZpZUxpc3R9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2Fib3V0XCIgY29tcG9uZW50PXtBYm91dH0vPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD0nL01vdmllLzppZCdcbiAgICAgICAgICAgICAgICAgICAgIHJlbmRlcj17KHsgcHJvcHMgfSkgPT4gPERldGFpbHMgey4uLnByb3BzfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2FkdlNlYXJjaFwiIGNvbXBvbmVudD17QWR2U2VhcmNofS8+XG4gICAgICAgICAgICAgICAgPC9Td2l0Y2g+XG5cbiAgICAgICAgICAgICAgICA8Rm9vdGVyIC8+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuXG5cblxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiAoe1xuICAgIC4uLnN0YXRlXG59KVxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiAoe1xuXG59KVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEFwcCkpO1xuXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBsaW5lYnJlYWstc3R5bGUgKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHtcclxuICAgIEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLFxyXG4gICAgU3dpdGNoLFxyXG4gICAgUm91dGUsXHJcbiAgICBMaW5rLFxyXG4gICAgUmVkaXJlY3QsXHJcbiAgICB1c2VMb2NhdGlvbixcclxuICAgIHVzZVBhcmFtc1xyXG59IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5pbXBvcnQgQXV0b2NvbXBsZXRlIGZyb20gXCIuL0F1dG9jb21wbGV0ZVwiO1xyXG5cclxuXHJcblxyXG5jb25zdCBIZWFkZXIgPSAocHJvcHMpID0+IHtcclxuICAgIHJldHVybihcclxuXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cclxuICAgICAgICAgICAgPG5hdj5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJtZW51XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPjxMaW5rIHRvPVwiL1wiICA+SG9tZTwvTGluaz48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT48TGluayB0bz1cIi9BZHZTZWFyY2hcIiAgPlNlYXJjaCs8L0xpbms+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+PExpbmsgdG89XCIvYWJvdXRcIj5BYm91dDwvTGluaz48L2xpPlxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxBdXRvY29tcGxldGUvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8L25hdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbil9O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyXHJcblxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcclxuaW1wb3J0ICogYXMgYXBpIGZyb20gXCIuLi9saWIvYXBpXCI7XHJcbmltcG9ydCB7TGlua30gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBdXRvY29tcGxldGUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcclxuICAgICAgICBzdWdnZXN0aW9uczogUHJvcFR5cGVzLmluc3RhbmNlT2YoQXJyYXkpXHJcbiAgICB9O1xyXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wZXJ0eSA9IHtcclxuICAgICAgICBzdWdnZXN0aW9uczogW11cclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBhY3RpdmVTdWdnZXN0aW9uOiAwLFxyXG4gICAgICAgICAgICBzaG93U3VnZ2VzdGlvbnM6IGZhbHNlLFxyXG4gICAgICAgICAgICB1c2VySW5wdXQ6IFwiXCIsXHJcbiAgICAgICAgICAgIHJlc3VsdHM6IFtdXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuc2V0V3JhcHBlclJlZiA9IHRoaXMuc2V0V3JhcHBlclJlZi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tPdXRzaWRlID0gdGhpcy5oYW5kbGVDbGlja091dHNpZGUuYmluZCh0aGlzKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVDbGlja091dHNpZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlQ2xpY2tPdXRzaWRlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRJbmZvID0gKCkgPT4ge1xyXG4gICAgICAgIGFwaS5nZXRTZWFyY2godGhpcy5zdGF0ZS51c2VySW5wdXQpXHJcbiAgICAgICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBvYmogPSBkYXRhLnJlc3VsdHM7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0QXJyID0gZGF0YS5yZXN1bHRzLm1hcCgobW92aWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2lkOiBtb3ZpZS5pZCx0aXRsZTogbW92aWUudGl0bGV9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiVEhFTlwiLHJlc3VsdEFycilcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHM6IHJlc3VsdEFyclxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKChkYXRhKT0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBvbkNoYW5nZSA9IGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgc3VnZ2VzdGlvbnMgfSA9IHRoaXMucHJvcHM7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB1c2VySW5wdXQ6IGUuY3VycmVudFRhcmdldC52YWx1ZVxyXG4gICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUudXNlcklucHV0ICYmIHRoaXMuc3RhdGUudXNlcklucHV0Lmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vaWYgKHRoaXMuc3RhdGUudXNlcklucHV0Lmxlbmd0aCAlIDIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2codGhpcy5zdGF0ZS51c2VySW5wdXQpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRJbmZvKCk7XHJcbiAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCB1c2VySW5wdXQgPSBlLmN1cnJlbnRUYXJnZXQudmFsdWU7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuc3RhdGUucmVzdWx0c1xyXG4gICAgICAgIC8qY29uc3QgZmlsdGVyZWRTdWdnZXN0aW9ucyA9IHRoaXMuc3RhdGUucmVzdWx0cy5maWx0ZXIoXHJcbiAgICAgICAgICAgIHN1Z2dlc3Rpb24gPT5cclxuICAgICAgICAgICAgc3VnZ2VzdGlvbi50b0xvd2VyQ2FzZSgpLmluZGV4T2YodXNlcklucHV0LnRvTG93ZXJDYXNlKCkpID4gLTFcclxuICAgICAgICApO1xyXG4qL1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBhY3RpdmVTdWdnZXN0aW9uOiAwLFxyXG4gICAgICAgICAgICByZXN1bHRzLFxyXG4gICAgICAgICAgICBzaG93U3VnZ2VzdGlvbnM6IHRydWUsXHJcbiAgICAgICAgICAgIHVzZXJJbnB1dDogZS5jdXJyZW50VGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIG9uQ2xpY2sgPSBlID0+IHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgYWN0aXZlU3VnZ2VzdGlvbjogMCxcclxuICAgICAgICAgICAgcmVzdWx0czogW10sXHJcbiAgICAgICAgICAgIHNob3dTdWdnZXN0aW9uczogZmFsc2UsXHJcbiAgICAgICAgICAgIHVzZXJJbnB1dDogZS5jdXJyZW50VGFyZ2V0LmlubmVyVGV4dFxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIG9uS2V5RG93biA9IGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgYWN0aXZlU3VnZ2VzdGlvbiwgcmVzdWx0cyB9ID0gdGhpcy5zdGF0ZTtcclxuXHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVTdWdnZXN0aW9uOiAwLFxyXG4gICAgICAgICAgICAgICAgc2hvd1N1Z2dlc3Rpb25zOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHVzZXJJbnB1dDogcmVzdWx0c1thY3RpdmVTdWdnZXN0aW9uXVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzgpIHtcclxuICAgICAgICAgICAgaWYgKGFjdGl2ZVN1Z2dlc3Rpb24gPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZVN1Z2dlc3Rpb246IGFjdGl2ZVN1Z2dlc3Rpb24gLSAxIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA0MCkge1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlU3VnZ2VzdGlvbiAtIDEgPT09IHJlc3VsdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVTdWdnZXN0aW9uOiBhY3RpdmVTdWdnZXN0aW9uICsgMSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSB3cmFwcGVyIHJlZlxyXG4gICAgICovXHJcbiAgICBzZXRXcmFwcGVyUmVmKG5vZGUpIHtcclxuICAgICAgICB0aGlzLndyYXBwZXJSZWYgPSBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWxlcnQgaWYgY2xpY2tlZCBvbiBvdXRzaWRlIG9mIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlQ2xpY2tPdXRzaWRlKGV2ZW50KSB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIndyYXBwZXJcIiwgdGhpcy53cmFwcGVyUmVmKVxyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJldmVudFwiLCBldmVudC50YXJnZXQpXHJcbiAgICAgICAgaWYgKHRoaXMud3JhcHBlclJlZiAmJiAhdGhpcy53cmFwcGVyUmVmLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVTdWdnZXN0aW9uOiAwLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0czogW10sXHJcbiAgICAgICAgICAgICAgICBzaG93U3VnZ2VzdGlvbnM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdXNlcklucHV0OiAnJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlLFxyXG4gICAgICAgICAgICBvbkNsaWNrLFxyXG4gICAgICAgICAgICBvbktleURvd24sXHJcbiAgICAgICAgICAgIHN0YXRlOiB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVTdWdnZXN0aW9uLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0cyxcclxuICAgICAgICAgICAgICAgIHNob3dTdWdnZXN0aW9ucyxcclxuICAgICAgICAgICAgICAgIHVzZXJJbnB1dFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSA9IHRoaXM7XHJcblxyXG4gICAgICAgIGxldCBzdWdnZXN0aW9uc0xpc3RDb21wb25lbnQ7XHJcblxyXG4gICAgICAgIGlmIChzaG93U3VnZ2VzdGlvbnMgJiYgdXNlcklucHV0KSB7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zTGlzdENvbXBvbmVudCA9IChcclxuICAgICAgICAgICAgICAgICAgICA8dWwgaWQ9XCJzZWFyY2hSZXN1bHRzXCIgcmVmPXt0aGlzLnNldFdyYXBwZXJSZWZ9PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3Jlc3VsdHMubWFwKChzdWdnZXN0aW9uLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNsYXNzTmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IGFjdGl2ZVN1Z2dlc3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImF1dG9jb21wTGlzdFwiIGtleT17c3VnZ2VzdGlvbi5pZH0gb25DbGljaz17b25DbGlja30gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz17YC9Nb3ZpZS8keyBzdWdnZXN0aW9uLmlkIH1gfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdWdnZXN0aW9uLnRpdGxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3VnZ2VzdGlvbnNMaXN0Q29tcG9uZW50ID0gKFxyXG4gICAgICAgICAgICAgICAgICAgIDx1bCBpZD1cInNlYXJjaFJlc3VsdHNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vIHN1Z2dlc3Rpb25zPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInNlYXJjaFwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uS2V5RG93bj17b25LZXlEb3dufVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt1c2VySW5wdXR9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAge3N1Z2dlc3Rpb25zTGlzdENvbXBvbmVudH1cclxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBdXRvY29tcGxldGU7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmXG4gICAgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGxpbmVicmVhay1zdHlsZSAqL1xyXG5cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcblxyXG5cclxuY29uc3QgRm9vdGVyID0gKCkgPT4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmb290ZXJcIj5cclxuICAgICAgICA8cD5cclxuICAgICAgICAgICAgQ29weXJpZ2h0IDIwMjAgLSBSZWFjdCBwbGF0Zm9ybVxyXG4gICAgICAgIDwvcD5cclxuICAgIDwvZGl2PlxyXG4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG5pbXBvcnQge0xpbmt9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cblxuIGNsYXNzIEFib3V0IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgICB0aGlzLmdvQmFjayA9IHRoaXMuZ29CYWNrLmJpbmQodGhpcyk7XG4gICAgIH1cblxuICAgICBzdGF0ZSA9IHtcbiAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICB9O1xuXG4gICAgIGdvQmFjaygpe1xuICAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LmdvQmFjaygpO1xuICAgICB9XG5cblxuICAgICBjb21wb25lbnREaWRNb3VudCAoKSB7XG5cbiAgICAgfVxuXG4gICAgICByZW5kZXIoKSB7XG5cbiAgICAgICAgY29uc3QgeyB0b3RhbFJlc3VsdHMsIHRvdGFsUGFnZXMsIHJlc3VsdHMsIGxvYWRpbmcgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFib3V0XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJhY2tcIiBvbkNsaWNrPXt0aGlzLmdvQmFja30+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8aDI+QWJvdXQ8L2gyPlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgU2ltcGxlIGFib3V0IHBhZ2UuLi5cbiAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgRnJvbnRlbmQgQ2hhbGxlbmdlIHYxLjAgcmVhbGl6ZWQgZm9yIEdsb2JhbCBHYW1pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkcuQy48L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9XG59XG5cbkFib3V0LnByb3BUeXBlcyA9IHtcbiAgY291bnQ6IFByb3BUeXBlcy5udW1iZXJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFib3V0O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0ICogYXMgYXBpIGZyb20gXCIuLi9saWIvYXBpXCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHtMaW5rLHdpdGhSb3V0ZXJ9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCB7IGFkZE1vdmllRGV0YWlsLHJlbW92ZU1vdmllRGV0YWlsLCBtb3ZpZUxpc3QgfSBmcm9tICcuLi9hY3Rpb25zL21vdmllQWN0aW9uJztcbmltcG9ydCB7IG1vdmllR2VucmVzLHNlbGVjdGVkR2VucmUgfSBmcm9tICcuLi9hY3Rpb25zL2dlbnJlQWN0aW9uJztcblxuIGNsYXNzIE1vdmllTGlzdCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgIHRoaXMuYWRkTW92aWVEZXRhaWwuYmluZCh0aGlzLCBwcm9wcylcbiAgICAgICAgIHRoaXMuc2VsZWN0ZWRHZW5yZS5iaW5kKHRoaXMpXG4gICAgICAgICB0aGlzLm1vdmllR2VucmVzLmJpbmQodGhpcywgcHJvcHMpXG4gICAgICAgICB0aGlzLm1vdmllTGlzdC5iaW5kKHRoaXMsIHByb3BzKVxuICAgICB9XG4gICAgIHN0YXRlID0ge1xuICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICB0b3RhbFJlc3VsdHM6IG51bGwsXG4gICAgICAgICB0b3RhbFBhZ2VzOiBudWxsLFxuICAgICAgICAgbW92aWVMaXN0OiBbXSxcbiAgICAgICAgIHJlc3VsdHM6IFtdLFxuICAgICAgICAgbW92aWVHZW5yZXM6IFtdXG4gICAgIH07XG5cbiAgICAgYWRkTW92aWVEZXRhaWwgPSAobW92aWVEZXRhaWwpID0+IHtcbiAgICAgICAgIC8vY29uc29sZS5sb2coXCJERVRUQUdMSU8gUFJJTUEgREkgQ0hJQU1BUkUgQUNUSU9OXCIsbW92aWVEZXRhaWwpO1xuICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuYWRkTW92aWVEZXRhaWwobW92aWVEZXRhaWwpO1xuICAgICB9XG5cbiAgICAgbW92aWVMaXN0ID0gKG1vdmllcykgPT4ge1xuICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkRFVFRBR0xJTyBQUklNQSBESSBDSElBTUFSRSBBQ1RJT05cIixtb3ZpZURldGFpbCk7XG4gICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5tb3ZpZUxpc3QobW92aWVzKTtcbiAgICAgfVxuXG4gICAgIHJlbW92ZU1vdmllRGV0YWlsID0gKCkgPT4ge1xuICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucmVtb3ZlTW92aWVEZXRhaWwoKTtcbiAgICAgfVxuXG4gICAgIHNlbGVjdGVkR2VucmUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgIC8vY29uc29sZS5sb2coXCJTRUxFQ1RFRFwiLCBldmVudC50YXJnZXQudmFsdWUpXG4gICAgICAgICBsZXQgc2VsSWQgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgICBzZWxJZCA/IHRoaXMudXBkYXRlVmlldyhzZWxJZCkgOiB0aGlzLmdldE1vdmllTGlzdCgpXG5cbiAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnNlbGVjdGVkR2VucmUoc2VsSWQpO1xuICAgICB9XG5cbiAgICAgbW92aWVHZW5yZXMgPSAoZ2VucmVzKSA9PiB7XG4gICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5tb3ZpZUdlbnJlcyhnZW5yZXMpO1xuICAgICB9XG5cbiAgICAgdXBkYXRlVmlldyhnZW5yZUlkKSB7XG4gICAgICAgICBsZXQgcmVzdWx0cyA9IHRoaXMuc3RhdGUubW92aWVMaXN0O1xuXG4gICAgICAgICBsZXQgZmlsdGVyZWRSZXN1bHRzO1xuICAgICAgICAgZmlsdGVyZWRSZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIoXG4gICAgICAgICAgICAgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGVsZW1lbnRbJ2dlbnJlX2lkcyddLmluZGV4T2YoK2dlbnJlSWQpID4gLTEpXG4gICAgICAgICB9KVxuXG4gICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICByZXN1bHRzOiBmaWx0ZXJlZFJlc3VsdHNcbiAgICAgICAgIH0pO1xuXG4gICAgIH1cblxuXG4gICAgIGdldE1vdmllTGlzdCA9ICgpID0+IHtcbiAgICAgICAgIGFwaS5nZXRNb3ZpZUxpc3QoKVxuICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiUkVTUFwiLHJlc3BvbnNlLmRhdGEucmVzdWx0cyk7XG5cbiAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUubG9hZGluZykgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgIGNvbnN0IHsgdG90YWxfcmVzdWx0cywgdG90YWxfcGFnZXMsIHJlc3VsdHMgfSA9IHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgIHRvdGFsUmVzdWx0czogdG90YWxfcmVzdWx0cyxcbiAgICAgICAgICAgICAgICAgICAgIHRvdGFsUGFnZXM6IHRvdGFsX3BhZ2VzLFxuICAgICAgICAgICAgICAgICAgICAgbW92aWVMaXN0OiByZXN1bHRzLFxuICAgICAgICAgICAgICAgICAgICAgcmVzdWx0czogcmVzdWx0c1xuICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICB0aGlzLm1vdmllTGlzdChyZXN1bHRzKTtcblxuXG4gICAgICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2UpPT57XG4gICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZXNwb25zZSk7XG4gICAgICAgICB9KTtcblxuICAgICB9O1xuXG4gICAgIGdldEdlbnJlcyA9ICgpID0+IHtcbiAgICAgICAgIGFwaS5nZXRHZW5yZXMoKVxuICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiUkVTUFwiLHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5sb2FkaW5nKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgIG1vdmllR2VucmVzOiByZXNwb25zZS5kYXRhLmdlbnJlc1xuICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICB0aGlzLm1vdmllR2VucmVzKHJlc3BvbnNlLmRhdGEuZ2VucmVzKVxuXG5cbiAgICAgICAgICAgICB9KS5jYXRjaCgoZGF0YSk9PntcbiAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xuICAgICAgICAgfSk7XG5cblxuICAgICB9O1xuXG4gICAgIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICAgICAgIHRoaXMuZ2V0TW92aWVMaXN0KCk7XG4gICAgICAgICB0aGlzLmdldEdlbnJlcygpO1xuICAgICB9XG4gICAgIGNvbXBvbmVudFdpbGxNb3VudCAoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTW92aWVEZXRhaWwoKVxuICAgICB9XG5cbiAgICAgIHJlbmRlcigpIHtcblxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiU1RBVEVcIix0aGlzLnN0YXRlLCB0aGlzLnByb3BzKVxuICAgICAgICBjb25zdCB7IHRvdGFsUmVzdWx0cywgdG90YWxQYWdlcywgcmVzdWx0cywgbG9hZGluZyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICByZXR1cm4gKFxuXG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vdmllTGlzdFwiPlxuICAgICAgICAgICAgICA8aDE+VGhlTW92aWVEYiBEaXJlY3RvcnkhPC9oMT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWx0ZXJCeUdlbnJlXCI+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiZmlsdGVyXCI+PiBGaWx0ZXIgYnkgR2VucmVzPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9XCJmaWx0ZXJcIiBjbGFzc05hbWU9XCJtb3ZpZUdlbnJlc1wiIHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfSBvbkNoYW5nZT17dGhpcy5zZWxlY3RlZEdlbnJlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5tb3ZpZUdlbnJlcy5tYXAobW92aWVHZW5yZXMgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBrZXk9e21vdmllR2VucmVzLmlkfSB2YWx1ZT17bW92aWVHZW5yZXMuaWR9Pnttb3ZpZUdlbnJlcy5uYW1lfTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAge3RoaXMuc3RhdGUucmVzdWx0cy5tYXAocmVzdWx0cyA9PiAoXG4gICAgICAgICAgICAgICAgPGxpIGtleT17cmVzdWx0cy5pZH0+XG4gICAgICAgICAgICAgICAgICA8TGluayB0bz17YC9Nb3ZpZS8keyByZXN1bHRzLmlkIH1gfSBvbkNsaWNrPXt0aGlzLmFkZE1vdmllRGV0YWlsLmJpbmQodGhpcywgcmVzdWx0cyl9ID5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e1wiaHR0cHM6Ly9pbWFnZS50bWRiLm9yZy90L3AvdzUwMFwiICsgcmVzdWx0cy5wb3N0ZXJfcGF0aH0gY2xhc3NOYW1lPVwibW92aWVDYXJkXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8aDI+e3Jlc3VsdHMudGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cIntyZXN1bHRzLm92ZXJ2aWV3fVwiPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1vcmVcIj5TZWUgbW9yZS4uLjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgKTtcbiAgICAgIH1cbn1cblxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiAoe1xuICAgIC4uLnN0YXRlXG59KVxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiAoe1xuICAgIGFkZE1vdmllRGV0YWlsOiAobW92aWVEZXRhaWwpID0+IGRpc3BhdGNoKGFkZE1vdmllRGV0YWlsKG1vdmllRGV0YWlsKSksXG4gICAgcmVtb3ZlTW92aWVEZXRhaWw6ICgpID0+IGRpc3BhdGNoKHJlbW92ZU1vdmllRGV0YWlsKCkpLFxuICAgIHNlbGVjdGVkR2VucmU6IChnZW5yZUlkKSA9PiBkaXNwYXRjaChzZWxlY3RlZEdlbnJlKGdlbnJlSWQpKSxcbiAgICBtb3ZpZUdlbnJlczogKGdlbnJlcykgPT4gZGlzcGF0Y2gobW92aWVHZW5yZXMoZ2VucmVzKSksXG4gICAgbW92aWVMaXN0OiAobW92aWVzKSA9PiBkaXNwYXRjaChtb3ZpZUxpc3QobW92aWVzKSlcbn0pXG5cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcihjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcyxtYXBEaXNwYXRjaFRvUHJvcHMpKE1vdmllTGlzdCkpO1xuIiwiZXhwb3J0IGNvbnN0IG1vdmllR2VucmVzID0gKGdlbnJlcykgPT4gZGlzcGF0Y2ggPT4ge1xyXG4gICAgLy9jb25zb2xlLmxvZyhcIkFDVElPTlwiLG1vdmllRGV0YWlsKVxyXG4gICAgZGlzcGF0Y2goe1xyXG4gICAgICAgIHR5cGU6IFwiQUxMX0dFTlJFU1wiLFxyXG4gICAgICAgIHBheWxvYWQ6ICBnZW5yZXNcclxuICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzZWxlY3RlZEdlbnJlID0gKGdlbnJlSWQpID0+IGRpc3BhdGNoID0+IHtcclxuICAgIC8vY29uc29sZS5sb2coXCJBQ1RJT05cIixtb3ZpZURldGFpbClcclxuICAgIGRpc3BhdGNoKHtcclxuICAgICAgICB0eXBlOiBcIlNFTEVDVEVEX0dFTlJFXCIsXHJcbiAgICAgICAgcGF5bG9hZDogIGdlbnJlSWRcclxuICAgIH0pXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgKiBhcyBhcGkgZnJvbSBcIi4uL2xpYi9hcGlcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7YWRkTW92aWVEZXRhaWx9IGZyb20gXCIuLi9hY3Rpb25zL21vdmllQWN0aW9uXCI7XG5cbmNsYXNzIERldGFpbHMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaXNMb2FkZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGF0YTogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZ29CYWNrID0gdGhpcy5nb0JhY2suYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBnb0JhY2soKXtcbiAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LmdvQmFjaygpO1xuICAgIH1cblxuXG4gICAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgICAgICBsZXQgbW92aWVJZCA9IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLmlkO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiQUxMREFUQS0tPlwiLHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpXG4gICAgICAgIHRoaXMuZ2V0RGV0YWlscyhtb3ZpZUlkKTtcbiAgICB9XG5cblxuXG4gICAgZ2V0RGV0YWlscyA9IChtb3ZpZUlkKSA9PiB7XG4gICAgICAgIGxldCBmbGFnRmV0Y2hEYXRhID0gZmFsc2U7XG4gICAgICAgICh0aGlzLnByb3BzLm1vdmllUmVkdWNlci5tb3ZpZURldGFpbCkgPyBudWxsIDogZmxhZ0ZldGNoRGF0YSA9IHRydWUgO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiRkVUQ0hcIixmbGFnRmV0Y2hEYXRhKVxuXG4gICAgICAgIGlmIChmbGFnRmV0Y2hEYXRhKSB7XG5cbiAgICAgICAgICAgIGFwaS5nZXREZXRhaWxzKG1vdmllSWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRVhFQ1wiLHJlc3BvbnNlLCB0aGlzLnByb3BzKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTG9hZGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKCk9PntcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaXNMb2FkZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5wcm9wcy5tb3ZpZVJlZHVjZXIubW92aWVEZXRhaWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cblxuXG5cbiAgICB9O1xuXG5cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJERVRUXCIsIHRoaXMucHJvcHMpXG4gICAgICAgIGNvbnN0IHsgaXNMb2FkZWQsIGRhdGEgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiA8ZGl2IC8+XG4gICAgICAgIH1cblxuXG4gICAgICAgICAgICByZXR1cm4gKDxkaXYgY2xhc3NOYW1lPVwiZGV0YWlsc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmFja1wiIG9uQ2xpY2s9e3RoaXMuZ29CYWNrfT5cblxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtcImh0dHBzOi8vaW1hZ2UudG1kYi5vcmcvdC9wL3c1MDBcIiArIGRhdGEucG9zdGVyX3BhdGh9IGNsYXNzTmFtZT1cIm1vdmllQ2FyZFwiIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMj57ZGF0YS50aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cIntkYXRhLm92ZXJ2aWV3fVwiPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+KVxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgfVxufVxuXG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgb3duUHJvcHMpID0+ICh7XG4gICAgLi4uc3RhdGVcbn0pO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiAoe1xuICAgIC8vYWRkTW92aWVEZXRhaWw6ICgpID0+IGRpc3BhdGNoKGFkZE1vdmllRGV0YWlsKCkpXG59KVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLG1hcERpc3BhdGNoVG9Qcm9wcykoRGV0YWlscykpOyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5cclxuaW1wb3J0IHtMaW5rfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5cclxuXHJcbmNsYXNzIEFkdlNlYXJjaCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuZ29CYWNrID0gdGhpcy5nb0JhY2suYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0ZSA9IHtcclxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcclxuICAgIH07XHJcblxyXG4gICAgZ29CYWNrKCl7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LmdvQmFjaygpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgY29uc3QgeyB0b3RhbFJlc3VsdHMsIHRvdGFsUGFnZXMsIHJlc3VsdHMsIGxvYWRpbmcgfSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWR2U2VhcmNoXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJhY2tcIiBvbkNsaWNrPXt0aGlzLmdvQmFja30+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGgyPkFkdmFuY2VkIHNlYXJjaDwvaDI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIC4uLkkgcHJvbWlzZSB0byByZWFsaXplIGl0IGlmIHlvdSBoaXJlIG1lIC4uLjxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIEp1c3Qga2lkZGluZyEgOi1EXHJcbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgRnJvbnRlbmQgQ2hhbGxlbmdlIHYxLjAgcmVhbGl6ZWQgZm9yIEdsb2JhbCBHYW1pbmdcclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5HLkMuPC9zcGFuPlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWR2U2VhcmNoO1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wicm9vdFwiOlwicm9vdFwiLFwiYXBwXCI6XCJhcHBcIixcImJhY2tcIjpcImJhY2tcIixcIm1vdmllTGlzdFwiOlwibW92aWVMaXN0XCIsXCJmaWx0ZXJCeUdlbnJlXCI6XCJmaWx0ZXJCeUdlbnJlXCIsXCJtb3JlXCI6XCJtb3JlXCIsXCJkZXRhaWxzXCI6XCJkZXRhaWxzXCIsXCJwb3N0ZXJcIjpcInBvc3RlclwiLFwiaW5mb1wiOlwiaW5mb1wiLFwiYWJvdXRcIjpcImFib3V0XCIsXCJhZHZTZWFyY2hcIjpcImFkdlNlYXJjaFwiLFwiaGVhZGVyXCI6XCJoZWFkZXJcIixcInNlYXJjaFwiOlwic2VhcmNoXCIsXCJzZWFyY2hSZXN1bHRzXCI6XCJzZWFyY2hSZXN1bHRzXCIsXCJtZW51XCI6XCJtZW51XCIsXCJmb290ZXJcIjpcImZvb3RlclwifTsiXSwic291cmNlUm9vdCI6IiJ9